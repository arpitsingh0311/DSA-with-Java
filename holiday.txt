class Solution {
    public void setZeroes(int[][] arr) {
        int m = arr.length; int n = arr[0].length;
        int[][] helper = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                helper[i][j] = arr[i][j];
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(helper[i][j]==0){
                    for(int b=0;b<n;b++){
                        arr[i][b]=0;
                    }
                    for(int a=0;a<m;a++){
                        arr[a][j]=0;
                    }
                }
            }
        }
    }
}
class Solution {
    public void setZeroes(int[][] arr) {
        int m = arr.length; int n = arr[0].length;
        boolean[] row = new boolean[m];
        boolean[] col = new boolean[n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(arr[i][j]==0){
                    row[i] = true;
                    col[j] = true;
                }
            }
        }
        for(int i=0;i<m;i++){
            if(row[i]==true){
                for(int j=0;j<n;j++){
                    arr[i][j] = 0;
                }
            }
        }
        for(int j=0;j<n;j++){
            if(col[j]==true){
                for(int i=0;i<m;i++){
                    arr[i][j] = 0;
                }
            }
        }
    }
}
class Solution {
    public void setZeroes(int[][] arr) {
        int m = arr.length; 
        int n = arr[0].length;
        boolean row = false, col = false;
        // Check if the first column needs to be set to zero
        for (int i = 0; i < m; i++) {
            if (arr[i][0] == 0) {
                col = true;
                break;
            }
        }
        // Check if the first row needs to be set to zero
        for (int j = 0; j < n; j++) {
            if (arr[0][j] == 0) {
                row = true;
                break;
            }
        }
        // Use the first row and column to mark zeros
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (arr[i][j] == 0) {
                    arr[i][0] = 0;
                    arr[0][j] = 0;
                }
            }
        }
        // Set columns to zero based on markers
        for (int j = 1; j < n; j++) {
            if (arr[0][j] == 0) {
                for (int i = 1; i < m; i++) {
                    arr[i][j] = 0;
                }
            }
        }
        // Set rows to zero based on markers
        for (int i = 1; i < m; i++) {
            if (arr[i][0] == 0) {
                for (int j = 1; j < n; j++) {
                    arr[i][j] = 0;
                }
            }
        }
        // Set the first row to zero if needed
        if (row) {
            for (int j = 0; j < n; j++) {
                arr[0][j] = 0;
            }
        }
        // Set the first column to zero if needed
        if (col) {
            for (int i = 0; i < m; i++) {
                arr[i][0] = 0;
            }
        }
    }
}
class Solution {
    public int fib(int n) {
        if(n<=1) return n;
        int[] dp = new int[3];
        dp[0]=0; dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[2] = dp[0] + dp[1];
            dp[0] = dp[1];
            dp[1] = dp[2];
        }
        return dp[2];
    }
}
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[2][n];
        for(int j=0;j<n;j++){
            dp[0][j]=1;
            dp[1][j]=1;
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[1][j] = dp[1][j-1] + dp[0][j];
            }
            for(int j=1;j<n;j++){
                dp[0][j] = dp[1][j];
            }
        }
        return dp[1][n-1];
    }
}
class Solution {
    public boolean subset(int i, int[] arr, int target, int[][] dp){
        if(i==arr.length){
            if(target==0) return true;
            else return false;
        }
        if(dp[i][target]!=-1) return (dp[i][target]==1);
        boolean ans = false;
        boolean skip = subset(i+1,arr,target,dp);
        if(target-arr[i]<0) ans = skip;
        else{
            boolean pick = subset(i+1,arr,target-arr[i],dp);
            ans = pick || skip;
        }
        dp[i][target] = (ans) ? 1 : 0;
        return ans;
    }
    public boolean canPartition(int[] arr) {
        int sum = 0;
        for(int ele : arr) sum += ele;
        if(sum%2!=0) return false;
        int target = sum/2;
        int[][] dp = new int[arr.length][target+1];
        for(int i=0;i<dp.length;i++)
            for(int j=0;j<dp[0].length;j++) dp[i][j]=-1;
        return subset(0,arr,target,dp);
    }
}
class Solution {
    static int sum;
    public int ways(int i, int[] arr,int res, int target,int[][] dp){
        if(i==arr.length){
            if(res==target) return 1;
            else return 0;
        }
        if(dp[i][res+sum]!=-1) return dp[i][res+sum];
        int add = ways(i+1,arr,res+arr[i],target,dp);
        int sub = ways(i+1,arr,res-arr[i],target,dp);
        return dp[i][res+sum] = add+sub;
    }
    public int findTargetSumWays(int[] arr, int target) {
        //i = 0 to n-1 || target = -sum to sum
        // dp[i][target+sum] -> ways(i,target)
        sum = 0;
        int n=arr.length;
        for(int ele:arr) sum+=ele;
        int[][] dp = new int[n][2*sum+1];
        for(int i=0;i<dp.length;i++)
            for(int j=0;j<dp[0].length;j++) dp[i][j]=-1;
        return ways(0,arr,0,target,dp);
    }
}
        // Ques-1-) Given an array of marks of students, if the marks of any student is less than 35 print its roll number. 
        int[] arr = {8,89,56,24,15,35,48,56};
        int target = 35;
        for(int i=0;i<arr.length;i++){
            if(arr[i]<target) 
            System.out.print(i+1 + " ");
        }
        */
        // ques-2-) Linear Search
        //          Find the element 'x' in the array. Take array and x as input.
        /*int[] arr = {89,65,4,5,9,4,5,26,5,4,5};
        int x = sc.nextInt();
        for(int i=0;i<arr.length;i++){
            if(arr[i]==x){
                System.out.println("Target found");
                break;
            }
        }*/
        // ques-3-)Find the maximum value out of all the elements in the array.
        /*int[] arr = {8,89,56,24,15,35,48,56};
        int max = Integer.MIN_VALUE;
        for(int ele:arr){
            if(ele>max) max = ele;
        }
        System.out.println(max);*/
        // ques-4-)Find the min value out of all the elements in the array.
        /*int[] arr = {8,89,56,24,15,35,48,56};
        int min = Integer.MAX_VALUE;
        for(int ele:arr){
            if(ele<min) min = ele;
        }
        System.out.println(min);*/
        // Ques-5-) Find the second largest element in the given array
        /*int[] arr = {8,89,56,24,15,35,48,56};
        int max = Integer.MIN_VALUE;
        for(int ele:arr){
            if(ele>max) max = ele;
        }
        int sm = Integer.MIN_VALUE;
        for(int ele:arr){
            if(ele != max){
                sm = Math.max(sm,ele);
            }
        }
        System.out.println(sm);*/
        // Ques-6-)find the doublet in the array whose sum is equal to the given value x.
        /*int[] arr = {8,89,56,24,15,35,48,56};
        int x = sc.nextInt();
        for(int i=0;i<arr.length;i++){
            for(int j=i+1;j<arr.length;j++){
                if(arr[i]+arr[j]==x){
                    System.out.println(arr[i] + " " + arr[j]);
                }
            }
        }*/
        // Ques-7-) Write a program to reverse the array without using any extra array.
        // Method - 1 using temp 
        /*int[] arr = {8,89,56,24,15,35,48,56};
        for(int i=0;i<arr.length/2;i++){
            int j = arr.length-1-i;
            int temp = arr[i];
            arr[i]=arr[j];
            arr[j]= temp;
        }
        for(int ele:arr){
            System.out.print(ele + " ");
        }*/
        // Method - 2 using two pointer
        int[] arr = {8,89,56,24,15,35,48,56};
        int i=0,j=arr.length-1;
        while(i<j){
            int temp =arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
            i++;
            j--;
        }
        for(int ele:arr){
            System.out.print(ele + " ");
        }
        // Ques-8-) Rotate the given array 'a' by k steps , where k is non -negative without using extra array.
        class Solution {
            public void swap(int[] arr, int i, int j){
                while(i<j){
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                    i++;j--;
                }
            }
            public void rotate(int[] arr, int k) {
                int n = arr.length;
                k = k % n;
                swap(arr,0,n-1);
                swap(arr,0,k-1);
                swap(arr,k,n-1); 
            }
        }
                int[] arr = {0,1,0,0,1,1,0,0,0};
        
        /*int noz=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]==0) noz++;
        }
        for(int i=0;i<arr.length;i++){
            if(i<noz) arr[i] = 0;
            else arr[i]=1;
        }
        for(int ele:arr){
            System.out.print(ele+" ");
        }*/

        /*int i=0, j=arr.length-1;
        while(i<j){
            if(arr[i]==0) i++;
            if(arr[j]==1) j--;
            if(i>j) break;
            if(arr[i]==1 && arr[j]==0){
                arr[i]=0;
                arr[j]=1;
                i++;j--;
            }
        }
        for(int ele:arr){
            System.out.print(ele+" ");
        }*/
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i=m-1, j=n-1, k=m+n-1;
        while(i>=0 && j>=0){
            if(nums1[i]>nums2[j]){
                nums1[k] = nums1[i];
                i--;
            } else{
                nums1[k] = nums2[j];
                j--;
            }
            k--;
        }
        while(j >= 0){
            nums1[k] = nums2[j];
            j--;
            k--;
        }
    }
}
        /*int arr[] = {12,8,41,37,2,49,16,28,21};
        int n = arr.length;
        int[] ans = new int[n];
        ans[n-1] = -1;
        for(int i=0;i<n-1;i++){
            int max = Integer.MIN_VALUE;
            for(int j=i+1;j<n;j++){
                max = Math.max(max,arr[j]);
            }
            ans[i]=max;
        }
        for(int ele : ans){
            System.out.print(ele + " ");
        }
        int ng = arr[n-1];
        for(int i=n-2;i>=0;i--){
            ans[i] = ng;
            ng = Math.max(ng,arr[i]);
        }
        for(int ele:ans){
            System.out.print(ele + " ");
        }*/
class Solution {
    public boolean searchMatrix(int[][] arr, int x) {
        int m = arr.length, n = arr[0].length;
        int i=0, j=n-1;
        while(i<m && j>=0){
            if(arr[i][j]<x) i++;
            else if(arr[i][j]>x) j--;
            else return true;
        }
        return false;
    }
}
// Ques-1-) Write a program to store roll number and marks obtained by 4 students side by side in a matrix.
        // Ques-2-) Lasgent element in 2D array
        // Ques-3-)Sum of all elements in 2D matrix
        // Ques-4-) Addition of two matrix.
        // Ques-5-) Transpose of a matrix using new matrix
        /*int[][] arr = {{1,2,3},{4,5,6},{7,8,9}};
        print2D(arr);
        int[][] t = new int[arr.length][arr[0].length];
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[0].length;j++){
                t[i][j] = arr[j][i];
            }
        }
        print2D(t);*/
        // Ques-6-) Transpose of a matrix without using new matrix.
        /*int[][] arr = {{1,2,3},{4,5,6},{7,8,9}};
        print2D(arr);
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<i;j++){
                int temp = arr[i][j];
                arr[i][j] = arr[j][i];
                arr[j][i] = temp;
            }
        }
        print2D(arr);*/
        // Ques-7-)write a program to rotate a matrix by 90 degree.
        /*int[][] arr = {{1,2,3},{4,5,6},{7,8,9}};
        print2D(arr);
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<i;j++){
                int temp = arr[i][j];
                arr[i][j] = arr[j][i];
                arr[j][i] = temp;
            }
        }
        for(int i=0;i<arr.length;i++){
            int j=0, k=arr[i].length-1;
            while(j<k){
                int temp = arr[i][j];
                arr[i][j] = arr[i][k];
                arr[i][k] = temp;
                j++;k--;
            }
        }
        print2D(arr);*/
        // Ques-8-) Write a program to print the matrix in wave form
        /*int[][]  arr = {{92, 45, 21, 77, 68},{56, 89, 33, 55, 73},{18, 67, 42, 10, 27},{61, 58, 46, 84, 38},{51, 63, 17, 95, 70}};
        for(int i=0;i<arr.length;i++){
            if(i%2==0){
                for(int j=0;j<arr[i].length;j++) System.out.print(arr[i][j] + " ");
            } else {
                for(int j=arr[i].length-1;j>=0;j--) System.out.print(arr[i][j] + " ");
            }
        }*/
        // Ques-9-) Write a program to print matrix in spiral form.
/*class Solution {
    public List<Integer> spiralOrder(int[][] arr) {
        ArrayList<Integer> ans = new ArrayList<>();
        int m = arr.length, n = arr[0].length;
        int minr = 0, minc=0, maxr=m-1, maxc= n-1;
        while(minr<=maxr && minc<=maxc){
            for(int j=minc;j<=maxc;j++) ans.add(arr[minr][j]);
            minr++;
            if(minr>maxr || minc>maxc) break;        
            for(int i=minr;i<=maxr;i++) ans.add(arr[i][maxc]);
            maxc--;
            if(minr>maxr || minc>maxc) break;
            for(int j=maxc;j>=minc;j--) ans.add(arr[maxr][j]);
            maxr--;
            if(minr>maxr || minc>maxc) break;
            for(int i=maxr;i>=minr;i--) ans.add(arr[i][minc]);
            minc++;            
        }
        return ans;
    }
}*/
// Ques-10-) Given an integer 'numRows', generate Pascal's triangle.
/*class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=0;i<numRows;i++){
            List<Integer> row = new ArrayList<>();
            for(int j=0;j<=i;j++){
                if(j==0 || j==i){
                    row.add(1);
                }
                else{
                    row.add(ans.get(i-1).get(j-1)+ans.get(i-1).get(j));
                }
            }
            ans.add(row);
        }
        return ans;
    }
}*/
        // Ques-11-) Multiplication of two matrix.
        /*System.out.println("Enter matrix 1 ");
        System.out.print("Enter no. of rows : ");
        int m = sc.nextInt();
        System.out.print("Enter no. of columns : ");
        int n = sc.nextInt();
        int[][] a = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){ 
                System.out.print("Enter element ("+i+","+j+") : ");
                a[i][j]= sc.nextInt();
            }
        }
        for(int[] ele:a){
            for(int x:ele){
                System.out.print(x + " ");
            }
            System.out.println();
        }
        System.out.println("Enter matrix 2");
        System.out.print("Enter no. of rows : ");
        int p = sc.nextInt();
        System.out.print("Enter no. of columns : ");
        int q = sc.nextInt();
        int[][] b = new int[p][q];
        for(int i=0;i<p;i++){
            for(int j=0;j<q;j++){ 
                System.out.print("Enter element ("+i+","+j+") : ");
                b[i][j]= sc.nextInt();
            }
        }
        for(int[] ele:b){
            for(int x:ele){
                System.out.print(x + " ");
            }
            System.out.println();
        }
        System.out.println("Multiplication of both matrixes : ");
        if(n==p){
            int[][] c = new int[m][q];
            for(int i=0;i<m;i++){
                for(int j=0;j<q;j++){
                    for(int k=0;k<n;k++){
                        c[i][j] += a[i][k] * b[k][j];
                    }
                }
            }
            for(int[] ele:c){
                for(int x:ele){
                    System.out.print(x + " ");
                }
                System.out.println();
            }
        }else{
            System.out.println("Matrix multiplication is not possible");
        }*/
        // ques-12-) Leetcode 861(Med) Score after flipping matrix.
        /*class Solution {
            public int matrixScore(int[][] arr) {
                int m = arr.length, n = arr[0].length;
                for(int i=0;i<m;i++){
                    if(arr[i][0] == 0){
                        for(int j=0;j<n;j++){
                            if(arr[i][j]==0) arr[i][j] = 1;
                            else arr[i][j] = 0;
                        }
                    } 
                }
                for(int j=1;j<n;j++){
                    int one=0, zero = 0;
                    for(int i=0;i<m;i++){
                        if(arr[i][j] == 0) zero++;
                        else one++;
                    }
                    if(zero>one){
                        for(int i=0;i<m;i++){
                            if(arr[i][j]==0) arr[i][j] = 1;
                            else arr[i][j] = 0;
                        }
                    }
                }
                int score = 0;
                int base = 1;
                for(int j=n-1;j>=0;j--){
                    for(int i=0;i<m;i++){
                        score += (arr[i][j])*base;
                    }
                    base *= 2;
                }
                return score;
            }
        }*/
        // Ques-13-) Leetcode 240(Medium) Search in a 2D Matrix - II
        /*class Solution {
            public boolean searchMatrix(int[][] arr, int x) {
                int m = arr.length, n = arr[0].length;
                int i=0, j=n-1;
                while(i<m && j>=0){
                    if(arr[i][j]<x) i++;
                    else if(arr[i][j]>x) j--;
                    else return true;
                }
                return false;
            }
        }*/
        // Ques-14-) Leetcode 73 (Medium) Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
        /*class Solution {
            public void setZeroes(int[][] arr) {
                int m = arr.length, n = arr[0].length;
                boolean[] row = new boolean[m];
                boolean[] col = new boolean[n];
                for(int i=0;i<m;i++){
                    for(int j=0;j<n;j++){
                        if(arr[i][j]==0){
                            row[i] = true;
                            col[j] = true;
                        }
                    }
                }
                for(int i=0;i<m;i++){
                    if(row[i]==true){
                        for(int j=0;j<n;j++){
                            arr[i][j]=0;
                        }
                    }
                }
                for(int j=0;j<n;j++){
                    if(col[j]==true){
                        for(int i=0;i<m;i++){
                            arr[i][j]=0;
                        }
                    }
                }
            }
        }*/
        /*class solution {
            public void setZeroes(int[][] arr) {
                int m = arr.length, n = arr[0].length;
                boolean row = false, col = false;
                // Check for the row
                for(int j=0;j<n;j++){
                    if(arr[0][j]==0){
                        row=true;
                        break;
                    }
                }
                // Check for the col
                for(int i=0;i<m;i++){
                    if(arr[i][0]==0){
                        col = true;
                        break;
                    }
                }
                // use the first row and col to mark zeroes
                for (int i = 1; i < m; i++) {
                    for (int j = 1; j < n; j++) {
                        if (arr[i][j] == 0) {
                            arr[i][0] = 0;
                            arr[0][j] = 0;
                        }
                    }
                }
                for(int i=1;i<m;i++){
                    if(arr[i][0]==0){
                        for(int j=1;j<n;j++){
                            arr[i][j]=0;
                        }
                    }
                }
                for(int j=1;j<n;j++){
                    if(arr[0][j]==0){
                        for(int i=1;i<m;i++){
                            arr[i][j]=0;
                        }
                    }
                }
                if(row){
                    for(int j=0;j<n;j++){
                        arr[0][j]=0;
                    }
                }
                if(col){
                    for(int i=0;i<m;i++){
                        arr[i][0]=0;
                    }
                }
            }
        }*/
       // Ques-1-) Input a string and count all the vowels in the given string.
        /*System.out.print("Enter String : ");
        String s = sc.nextLine();
        int count = 0;
        for(int i=0;i<s.length();i++) if(isVowel(s.charAt(i))) count++;
        System.out.println(count);*/
        // Ques-2-) Input a string and print all the substring of that string.
        /*System.out.print("Enter String : ");
        String s = sc.nextLine();
        for(int i=0;i<s.length();i++){
            for(int j=i+1;j<=s.length();j++){
                System.out.print(s.substring(i, j) + " ");
            }
        }*/
        // Ques-3-) Take integer input and convert it into a string.
        /*int n = sc.nextInt();
        String s = Integer.toString(n);
        System.out.println(s);*/
        // Ques-4-) Return the total number of digits in a number without using loop.
        /*int n = sc.nextInt();
        String s = Integer.toString(n);
        System.out.println(s.length());*/
        // Ques-5-) Input a string and Update all the even positions in the string to character 'a'. Consider 0-basedindexing.
        /*String s = sc.next();
        String ans = "";
        for(int i=0;i<s.length();i++){
            if(i%2==0) ans += "a";
            else ans += s.charAt(i);
        }*/
        // Ques-6-) Input a string and toggle all the characters of it.(Replace all small case with capital case and vice versa)
        /*StringBuilder sb = new StringBuilder(sc.nextLine());
        for(int i=0;i<sb.length();i++){
            char ch = sb.charAt(i);
            int x = (int)ch;
            if(x>=65 && x<=90){
                x += 32;
                ch = (char)x;
                sb.setCharAt(i,ch);
            } else if(x>=97 && x<=122){
                x -= 32;
                ch = (char)x;
                sb.setCharAt(i,ch);                
            }
        }
        System.out.println(sb);*/
        // Ques-7-)Reverse each word in the given sentence.
        /*StringBuilder sb = new StringBuilder(sc.nextLine());
        int i=0,j=0,n=sb.length();
        while(j<n){
            if(sb.charAt(j) != ' ') j++;
            else{
                reverse(sb,i,j-1);
                i = j+1;
                j=i;
            }
        }
        reverse(sb,i,j-1);
        System.out.println(sb);*/
        // Ques-8-) Given two strings s and t, return true if t is an anagram of s and false otherwise.
/*class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()) return false;
        char[] a = s.toCharArray();
        char[] b = t.toCharArray();
        Arrays.sort(a);
        Arrays.sort(b);
        for(int i=0;i<s.length();i++){
            if(a[i]!=b[i]) return false;
        }
        return true;
    }
}*/
        // Ques-9-) Given a string consisting of lowercase English alphabets.PRint the character that is occuring most number of times. 
        /*String s = sc.next();
        int[] freq = new int[26];
        for(int i=0;i<s.length();i++){
            int idx = (int)s.charAt(i) - 97;
            freq[idx]++;
        }
        int max = Integer.MIN_VALUE;
        int max_idx = -1;
        for(int i=0;i<freq.length;i++){
            if(freq[i]>max){
                max = freq[i];
                max_idx = i;
            }

        }
        System.out.println((char)(max_idx+97));*/
        // Ques-10-) Leetcode 205(Easy) Given two strings s and t, determine if they are isomorphic (They can consists any valid character)
        // Ques-11-) Given n string consisting of digits from 0 to 9. Return the string which has maximum value.
        // Quees-12-) Leetcode 442(Medium) Compress the given string.
        /*class Solution {
            public int compress(char[] arr) {
                StringBuilder ans = new StringBuilder("");
                int i=0, j=0;
                while(j<arr.length){
                    if(arr[j]==arr[i]) j++;
                    else{
                        ans.append(arr[i]);
                        int len = j-i;
                        if(len>1) ans.append(len);
                        i=j;
                    }
                }
                ans.append(arr[i]);
                int len = j-i;
                if(len>1) ans.append(len);
                for(int k=0;k<ans.length();k++){
                    arr[k] = ans.charAt(k);
                }
                return ans.length();
            }
        }*/
int arr[] = inputarr();
        print(arr);
        int n = arr.length;
        // BUBBLE SORT --1-- 
        /*for(int j=0;j<arr.length-1;j++){
            for(int i=0;i<arr.length-1;i++){
                if(arr[i] > arr[i+1]){
                    int temp = arr[i];
                    arr[i] = arr[i+1];
                    arr[i+1] = temp;
                }
            }
        }
        print(arr);*/
        // BUBBLE SORT --2--
        /*for(int i=0;i<n-1;i++){
            for(int j=0;j<n-1-i;j++){
                if(arr[j] > arr[j+1]){
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
        print(arr);*/
// BUBBLE SORT --3--
        /*for(int i=0;i<n-1;i++){
            //Check arr is sorted or not
            boolean flag = true;
            for(int j=0;j<n-1-i;j++){
                if(arr[j] > arr[j+1]){
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                    flag = false;
                }
            }
            if(flag == true) break;
        }
        print(arr);*/
        // Selection Sort
        /*int[] arr = {3,5,2,1,4};
        int[] arr = {5,4,3,2,1};
        int n = arr.length;
        for(int i=0;i<n-1;i++){
            int m_idx = -1;
            int min = Integer.MAX_VALUE;
            for(int j=i;j<n;j++){
                if(arr[j]<min){
                    min = arr[j];
                    m_idx = j;
                }
            }
            int temp = arr[i];
            arr[i] = arr[m_idx];
            arr[m_idx] = temp;
        }
        for(int ele:arr){
            System.out.print(ele + " ");
        }*/
        // Insertion Sort
        // int[] arr = {3,5,2,1,4};
        /*int[] arr = {5,4,3,2,1};
        int n = arr.length;
        for(int i=1;i<n;i++){
            for(int j=i;j>=1;j--){
                if(arr[j]<arr[j-1]) swap(arr,j,j-1);
                else break;
            }
        }
        for(int ele:arr){
            System.out.print(ele + " ");
        }*/
class Solution {
    public int majorityElement(int[] arr) {
        Arrays.sort(arr);
        return arr[(arr.length)/2];
    }
}

class Solution {
    public int maximumCount(int[] arr) {
        int p = 0, n=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]<0) n++;
            if(arr[i]>0) p++;
        }
        return Math.max(p,n);
    }
}
class Solution {
    public int search(int[] arr, int target) {
        int low = 0, high = arr.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] >= target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
    public int maximumCount(int[] arr) {
        int n = search(arr,0);
        int p = arr.length - search(arr,1);
        return Math.max(p,n);
    }
}
//Ques-1-)Binary Search
        /*class Solution {
            public int search(int[] arr, int target) {
                int n = arr.length;
                int low=0, high=n-1;
                while(low<=high){
                    int mid = low + (high-low)/2;
                    if(arr[mid]==target) return mid;
                    else if(arr[mid]<target) low= mid+1;
                    else high=mid-1;
                }
                return -1;
            }
        }*/
        // Ques-2-) Given a sorted array and an integer 'x',find the lower bound of x. Smallest index such that    arr[index] >=x.
        /*int[] arr = {10,20,30,30,40,50,60,70};
        int n = arr.length;
        System.out.print("Enter target : ");
        int target = sc.nextInt();
        int lb = n;
        int low=0, high=n-1;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(arr[mid]>=target){
                lb = Math.min(lb,mid);
                high = mid-1;
            } else low = mid+1;
        }
        System.out.println(lb);*/
        //Ques-3-)Given an sorted integer array and an integer 'x'. Upper bound is the minimum index such that arr[index]>x.
        /*int[] arr = {10,20,30,30,40,50,60,70};
        int n = arr.length;
        System.out.print("Enter target : ");
        int target = sc.nextInt();
        int ub = n;
        int low=0, high=n-1;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(arr[mid]>target){
                ub = Math.min(ub,mid);
                high = mid-1;
            } else low = mid+1;
        }
        System.out.println(ub);*/
        // Ques-4-) Leetcode 34(Medium) Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value. 
        /*class Solution {
            public int[] searchRange(int[] arr, int target) {
                int[] ans = {-1,-1};
                int n = arr.length;
                int lo=0 , hi=n-1;
                boolean flag = false;
                while(lo<=hi){
                    int mid = lo + (hi-lo)/2;
                    if(target>arr[mid]) lo = mid+1;
                    else if(target<arr[mid]) hi = mid-1;
                    else if(target==arr[mid]){
                        flag=true;
                        break;
                    } 
                }
                if(flag==false) return ans;
                int lb=n;
                lo=0; hi=n-1;
                while(lo<=hi){
                    int mid = lo+(hi-lo)/2;
                    if(arr[mid]>=target){
                        lb= Math.min(mid,lb);
                        hi = mid-1;
                    } else lo = mid+1;
                }
                int ub=n;
                lo=0; hi=n-1;
                while(lo<=hi){
                    int mid = lo+(hi-lo)/2;
                    if(arr[mid]>target){
                        ub= Math.min(mid,ub);
                        hi = mid-1;
                    } else lo = mid+1;
                }
                ans[0] = lb;
                ans[1] = ub-1;
                return ans;
            }
        }*
        //Ques-5-) Leetcode 852(Medium) Peak index in a mountain array. 
        /*class Solution {
            public int peakIndexInMountainArray(int[] arr) {
                int n = arr.length;
                int low=1, high=n-2;
                while(low<=high){
                    int mid = low + (high-low)/2;
                    if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1]) return mid;
                    else if(arr[mid]>arr[mid-1] && arr[mid]<arr[mid+1]) low = mid+1;
                    else high = mid-1;
                }
                return -1;
            }
        }*/
        //Ques-6-) Leetcode-69(Easy) Sqrt(x)  
        /*class Solution {
            public int mySqrt(int x) {
                long lo=0, hi=(long) x;
                while(lo<=hi){
                    long mid = lo + (hi-lo)/2;
                    if(mid*mid==(long)x) return (int)mid;
                    else if(mid*mid < (long)x) lo = mid+1;
                    else hi = mid-1;
                }
                return (int)hi;
            }
        }*/
        //Ques-7-) Leetcode 33(Medium) Search in Rotated sorted array. 
        /*class Solution {
            public static int pivot(int[] arr) {
                int n = arr.length;
                int lo = 0, hi = n - 1;
                while (lo < hi) {
                    int mid = lo + (hi - lo) / 2;
                    if (arr[mid] > arr[hi]) {
                        lo = mid + 1; // Pivot is in the right part
                    } else {
                        hi = mid; // Pivot is in the left part
                    }
                }
                return lo; // Pivot index
            }
            public int Bsearch(int[] arr, int target,int low,int high) {
                int n = arr.length;
                while(low<=high){
                    int mid = low + (high-low)/2;
                    if(arr[mid]==target) return mid;
                    else if(arr[mid]<target) low= mid+1;
                    else high=mid-1;
                }
                return -1;
            }
            public int search(int[] arr, int target) {
                int p = pivot(arr);
                if (target >= arr[p] && target <= arr[arr.length - 1]) {
                    return Bsearch(arr, target, p, arr.length - 1); // Right part
                } else {
                    return Bsearch(arr, target, 0, p - 1); // Left part
                }
            }
        }*/
        /*class Solution {
            public int search(int[] arr, int target) {
                int n =arr.length;
                int lo=0,hi=n-1;
                while(lo<=hi){
                    int mid = lo + (hi-lo)/2;
                    if(arr[mid]==target) return mid;
                    else if(arr[mid]<=arr[hi]){
                        if(target>arr[mid] && target<=arr[hi]) lo = mid+1;
                        else hi=mid-1;
                    } else{
                        if(target>=arr[lo] && target<arr[mid]) hi = mid-1;
                        else lo=mid+1;                
                    }
                }
                return -1;
            }
        }*/
        //Ques-8-)  Leetcode 658(Medium) Find K closest elements.   
/*class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> ans = new ArrayList<>();
        int n=arr.length;
        if(x<arr[0]){
            for(int i=0;i<k;i++){
                ans.add(arr[i]);
            }
            return ans;
        }
        if(x>arr[n-1]){
            for(int i=n-1;i>=n-k;i--){
                ans.add(arr[i]);
            }
            Collections.sort(ans);
            return ans;
        }
        int lb=n;
        int lo=0, hi=n-1;
        while(lo<=hi){
            int mid=lo+(hi-lo)/2;
            if(arr[mid]>=x){
                lb=mid;
                hi=mid-1;
            } else lo=mid+1;
        }
        int i=lb-1, j=lb;
        while(k>0 && i>=0 && j<=n-1){
            int di = Math.abs(x-arr[i]);
            int dj = Math.abs(x-arr[j]);
            if(di<=dj){
                ans.add(arr[i]);
                i--;
            } else{
                ans.add(arr[j]);
                j++;
            }
            k--;
        }
        while(i<0 && k>0){
            ans.add(arr[j]);
            j++;
            k--;
        }
        while(j>=n && k>0){
            ans.add(arr[i]);
            i--;
            k--;
        }
        Collections.sort(ans);
        return ans;
    }
}*/
// Ques-9-)  Leetcode  1283(Medium) Find the smallest Divisor given a Threshold.     
class Solution {
    public boolean isLess(int[] arr,int mid, int t){
        int sum=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]%mid==0) sum+=arr[i]/mid;
            else sum += arr[i]/mid + 1;
        }
        if(sum<=t) return true;
        else return false;
    }
    public int smallestDivisor(int[] arr, int threshold) {
        int n = arr.length;
        int mx = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            mx = Math.max(mx,arr[i]);
        }
        int d=1;
        int lo=1,hi=mx;
        while(lo<=hi){
            int mid = lo + (hi-lo)/2;
            if(isLess(arr,mid,threshold)){
                d=mid;
                hi=mid-1;
            } else lo=mid+1;
        }
        return d;
    }
}
    //Ques-10-) Leetcode 1011(Medium) Capacity to ship packages within
class Solution {
        public boolean isPossible(int c, int[] arr, int d){
            int n = arr.length;
            int load = 0;
            int days = 1; 
            for(int i=0;i<n;i++){
                if(load + arr[i] <=c) load += arr[i];
                else{
                    load = arr[i];
                    days++;
                }
            }
            if(days>d) return false;
            else return true;
        }
        public int shipWithinDays(int[] arr, int d) {
            int n = arr.length;
            int sum = 0, mx = Integer.MIN_VALUE;
            for(int i=0;i<n;i++){
                mx = Math.max(mx,arr[i]);
                sum += arr[i];
            }
            int minC = sum;
            int lo = mx, hi = sum;
            while(lo<=hi){
                int mid = lo + (hi-lo)/2;
                if(isPossible(mid,arr,d) == true){
                    minC = mid;
                    hi = mid-1;
                }
                else lo = mid+1;
            }
            return minC;
        }
    }
    //Ques-11) Leetcode 2064(Medium) Minimized Maximum of products distributed to any store.
    /*class Solution {
        public boolean isPossible(int maxQ, int n, int[] arr){
            int stores = 0;
            for(int i=0;i<arr.length;i++){
                if(arr[i]%maxQ == 0) stores += arr[i]/maxQ;
                else stores += arr[i]/maxQ + 1;
            }
            if(stores > n) return false;
            else return true;
        }
        public int minimizedMaximum(int n, int[] arr) {
            int m = arr.length;
            int mx = Integer.MIN_VALUE;
            for(int i=0;i<m;i++){
                mx = Math.max(mx,arr[i]);
            }
            int lo=1, hi=mx;
            int Ans =0;
            while(lo<=hi){
                int mid = lo + (hi-lo)/2 ;
                if(isPossible(mid,n,arr)==true){
                    Ans = mid;
                    hi = mid-1;
                } 
                else lo = mid+1;
            }
            return Ans;
        }
    }*/
    //Ques-12-) Leetcode 1539(Medium) kth Missing positive number
    /*class Solution {
        public int findKthPositive(int[] arr, int k) {
            int lo=0,hi=arr.length-1;
            while(lo<=hi){
                int mid = lo + (hi-lo)/2;
                int missed = arr[mid] - (mid+1);
                if(missed<k) lo=mid+1;
                else hi=mid-1;
            }
            return k+hi+1;
        }
    }*/
class Solution {
    public int subset(int i, List<Integer> arr, int t, int[][] dp) {
        // Base cases
        if (t == 0) return 0; // Subsequence found
        if (i == arr.size() || t < 0) return Integer.MIN_VALUE; // No valid subsequence
        // Check memo table
        if (dp[i][t] != -1) return dp[i][t];
        // Skip the current element
        int skip = subset(i + 1, arr, t, dp);
        // Pick the current element
        int pick = Integer.MIN_VALUE;
        if (t - arr.get(i) >= 0) {
            pick = 1 + subset(i + 1, arr, t - arr.get(i), dp);
        }
        // Store the result in memo table
        return dp[i][t] = Math.max(skip, pick);
    }
    public int lengthOfLongestSubsequence(List<Integer> arr, int t) {
        int n = arr.size();
        int[][] dp = new int[n][t + 1];
        // Initialize the memo table with -1
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        // Find the maximum length subsequence
        int result = subset(0, arr, t, dp);
        // If no valid subsequence exists, return 0
        return result < 0 ? -1 : result;
    }
}
       // Ques-10-) Stair path
        //    Leetcode 70(Easy) but with use of DP Climbing Stairs
        /*class Solution {
            public int Stairs(int n, int[] dp){
                if(n<=2) return n;
                if(dp[n] != -1) return dp[n];
                dp[n] = Stairs(n-1,dp) + Stairs(n-2,dp);
                return dp[n];
            }
            public int climbStairs(int n) {
                int[] dp = new int[n+1];
                for(int i=0;i<dp.length;i++){
                    dp[i]=-1;
                }
                return Stairs(n,dp);
            }
        }*/
        //Ques-11-) Maze path  
        /*class Solution {
            public int maze(int m,int n,int[][] dp){
                if(m==1||n==1) return 1;
                if(dp[m][n]!=-1) return dp[m][n];
                int rw = maze(m,n-1,dp);
                int cw = maze(m-1,n,dp);
                return dp[m][n] = rw+cw;
            }
            public int uniquePaths(int m, int n) {
                int[][] dp = new int[m+1][n+1];
                for(int i=0;i<m+1;i++){
                    for(int j=0;j<n+1;j++){
                        dp[i][j] = -1;
                    }
                }
                return maze(m,n,dp);
            }
        }*/
        //Ques-12-)Print zig-zag  pre-in-post
        /*public static void pip(int n){
            if(n==0) return;
            System.out.print(n);
            pip(n-1);
            System.out.print(n);
            pip(n-1);
            System.out.print(n);
        }
        public static void main(String[] args) {
            int n = 3;
            pip(n);
        }*/

        //Ques-14-) Remove all occurances of 'a' from string.

        /*public static void removea(int i,String s, String ans){
            if(i==s.length()){
                System.out.print(ans);
                return;
            }
            if(s.charAt(i)!='a') ans += s.charAt(i);
            removea(i+1,s,ans);
        }*/
        //Leetcode 78 Subsets
/*class Solution {
    public void ss(int i,int[] arr,List<Integer> a,List<List<Integer>> ans){
        if(i==arr.length){
            ans.add(new ArrayList<>(a));
            return;
        }
        a.add(arr[i]);
        ss(i + 1, arr, a, ans);
        a.remove(a.size() - 1); 
        ss(i + 1, arr, a, ans);
    }
    public List<List<Integer>> subsets(int[] arr) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> a = new ArrayList<>();
        ss(0,arr,a,ans);
        return ans;
    }
}*/
// Leetcode 46(Medium) Permutation
/*
class Solution {
    public void p(int i,int[] arr,List<Integer> a,List<List<Integer>> ans){
        if(a.size()==arr.length){
            ans.add(new ArrayList<>(a));
        }
        for(int j=0;j<arr.length;j++){
            if(a.contains(arr[j])) continue;
            a.add(arr[j]);
            p(i+1,arr,a,ans);
            a.remove(a.size()-1);
        }
    }
    public List<List<Integer>> permute(int[] arr) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> a = new ArrayList<>();
        p(0,arr,a,ans);
        return ans;
    }
}
*/
// Leetcode 1979(Easy) Find Greatest Common Divisor of Array
/*class Solution {
    public int HCF(int a,int b){
        int temp=a%b;
        if(temp==0) return b;
        else return HCF(b,temp);
    }
    public int findGCD(int[] arr) {
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++){
            min = Math.min(min,arr[i]);
            max = Math.max(max,arr[i]);
        }
        return HCF(min,max);
    }
}*/
// Ques-18-)Leetcode 3211(Easy) Generate Binary Strings Without Adjacent Zero
/*class Solution {
    public void adjacent(int n, String s, List<String> ans){
        int m = s.length();
        if(m==n){
            ans.add(s);
            return;
        }
        if(m==0 || s.charAt(m-1)=='1'){
            adjacent(n,s+"0",ans);
            adjacent(n,s+"1",ans);
        } else{
            adjacent(n,s+"1",ans);
        }
    }
    public List<String> validStrings(int n) {
        List<String> ans = new ArrayList<>();
        adjacent(n,"",ans);
        return ans;
    }
}*/
        //Ques-19-) Leetode 22(Medium) Generate paranthesis 
/*class Solution {
    public void p(int n,int open,int close,String s,List<String> ans){
        if(s.length()==n*2){
            ans.add(s);
            return;
        }
        if(open<n) p(n,open+1,close,s+"(",ans);
        if(close<open) p(n,open,close+1,s+")",ans);
    }
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        p(n,0,0,"",ans);
        return ans;
    }
}*/
        //Ques-20-)Leetcode 38 Count and say
        /*class Solution {
            public String countAndSay(int n) {
                if(n==1) return "1";
                String s = countAndSay(n-1);
                String ans = "";
                int i=0,j=0;
                while(j<s.length()){
                    if(s.charAt(i)==s.charAt(j)) j++;
                    else{
                        int l=j-i;
                        ans += l;
                        ans += s.charAt(i);
                        i=j;
                    }
                }
                int l=j-i;
                ans += l;
                ans += s.charAt(i);
                return ans;
            }
        }*/
class Solution {
    public boolean canPartition(int[] arr) {
        int sum = 0, n=arr.length;
        for(int ele : arr) sum += ele;
        if(sum%2!=0) return false;
        int target = sum/2;
        int[][] dp = new int[arr.length][target+1];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                boolean ans = false;
                boolean skip = (i>0) ? (dp[i-1][j]==1) : (j==0);
                // boolean skip;
                // if(i>1) skip = (dp[i-1][j]==1);
                // else{
                //     skip = (j==0);
                // }
                if(j-arr[i]<0) ans = skip;
                else{
                    boolean pick = (i>0) ? (dp[i-1][j-arr[i]]==1):(j==0);
                    ans = pick || skip;
                }
                dp[i][j] = (ans) ? 1 : 0;
            }
        }
        return (dp[n-1][target]==1);
    }
}
        int[] arr = {8,0,2,4};
        int target = 14;
        int[][] dp = new int[arr.length][target+1];
        for(int i=0;i<dp.length;i++) Arrays.fill(dp[i],-1);
        System.out.println(subset(0,arr,target,dp));
            public static boolean subset(int i, int[] arr, int target,int[][] dp){
        if(i==arr.length){
            if(target==0) return true;
            else return false;
        }
        if(dp[i][target]!=-1) return (dp[i][target]==1);
        boolean ans =false;
        boolean skip = subset(i+1,arr, target,dp);
        if(target-arr[i]<0) ans = skip;
        else{
            boolean pick = subset(i+1,arr, target-arr[i],dp);
            ans = pick||skip;
        }
        if(ans) dp[i][target]=1;
        else dp[i][target]=0;
        return ans;
    }
        int[] val = {5,3,9,16};
        int[] wt = {1,2,8,10};
        int C = 8;
        int n = wt.length;
        // i = n-1 to 0 | C = C to 0
        int[][] dp = new int[n][C+1];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                int skip= (i>0) ? dp[i-1][j] : 0; 
                if(wt[i]>j) dp[i][j]=skip;//skip
                else{ 
                    int pick = val[i];
                    pick += (i>0) ? dp[i-1][j-wt[i]] : 0;
                    dp[i][j] = Math.max(pick,skip);  // take
                }
            }
        }
        System.out.println(dp[n-1][C]);
class Solution {
    public int lcs(int i,int j,StringBuilder a,StringBuilder b,int[][] dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(a.charAt(i)==b.charAt(j)) return (dp[i][j] = (1+ lcs(i-1,j-1,a,b,dp)));
        else return (dp[i][j] = Math.max(lcs(i-1,j,a,b,dp),lcs(i,j-1,a,b,dp)));
    }
    public int longestCommonSubsequence(String text1, String text2) {
        StringBuilder  a = new StringBuilder(text1);
        StringBuilder  b = new StringBuilder(text2);
        int m=a.length(), n=b.length();
        // i= m-1 to 0 | j=n-1 to 0
        int[][] dp = new int[m][n];
        for(int i=0;i<dp.length;i++) Arrays.fill(dp[i],-1);
        return lcs(m-1,n-1,a,b,dp);
    }
}
// TABULATION
// METHOD--1
/*
class Solution {
    public int longestCommonSubsequence(String a, String b) {
        int m=a.length(), n=b.length();
        // i= m-1 to 0 | j=n-1 to 0
        int[][] dp = new int[m][n];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                int p = (i>0 && j>0) ? dp[i-1][j-1] : 0;
                int q = (i>0) ? dp[i-1][j] : 0;
                int r = (j>0) ? dp[i][j-1] : 0;
                if(a.charAt(i)==b.charAt(j)) dp[i][j] = 1+ p;
                else dp[i][j] = Math.max(q,r);
            }
        }
        return dp[m-1][n-1];
    }
}
*/
// METHOD--2
/*
class Solution {
    public int longestCommonSubsequence(String a, String b) {
        int m=a.length(), n=b.length();
        // i= m-1 to 0 | j=n-1 to 0
        int[][] dp = new int[m+1][n+1];
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(a.charAt(i-1)==b.charAt(j-1)) 
                    dp[i][j] = 1+ dp[i-1][j-1];
                else dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m][n];
    }
}
*/
class Solution {
    public int longestCommonSubsequence(String a, String b) {
        int m=a.length(), n=b.length();
        // i= m-1 to 0 | j=n-1 to 0
        int[][] dp = new int[2][n+1];
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(a.charAt(i-1)==b.charAt(j-1)) 
                    dp[1][j] = 1+ dp[0][j-1];
                else dp[1][j] = Math.max(dp[0][j],dp[1][j-1]);
            }
            // Copy the 1st row to 0th row for the next time
            for(int j=0;j<=n;j++) dp[0][j] = dp[1][j];
        }
        return dp[1][n];
    }
}
class Solution {
        public static int profit(int i,int[] wt,int[] val,int C,int[][] dp){
        if(i==wt.length) return 0;
        if(dp[i][C]!=-1) return dp[i][C];
        int skip = profit(i+1,wt,val,C,dp);
        if(wt[i]>C) return dp[i][C] = skip;
        int pick = val[i] + profit(i,wt,val,C-wt[i],dp);
        return dp[i][C] = Math.max(pick,skip);
    }
    static int knapSack(int val[], int wt[], int C) {
        // code here
        int n = wt.length;
        // i = 0 to n-1 | C = C to 0
        int[][] dp = new int[n][C+1];
        for(int i=0;i<dp.length;i++)
            for(int j=0;j<dp[0].length;j++) dp[i][j] = -1;
        return profit(0,wt,val,C,dp);
    }
}
// Ques-7-) Leetcode 322(Medium) Coin Change
// RECURSION + MEMOIZATION
/*
class Solution {
    public long cc(int i, int[] arr, int a,long[][] dp){
        if(i==arr.length){
            if(a==0) return 0;
            else return Integer.MAX_VALUE;
        }
        if(dp[i][a]!=-1) return dp[i][a];
        long skip = cc(i+1,arr,a,dp);
        if(a-arr[i]<0) return dp[i][a] = skip;
        long pick = 1+cc(i,arr,a-arr[i],dp);
        return dp[i][a] = Math.min(skip,pick);
    }
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        long[][] dp = new long[n][amount+1];
        for(int i=0;i<dp.length;i++) Arrays.fill(dp[i],-1);
        int ans = (int)cc(0,coins,amount,dp);
        return (ans==Integer.MAX_VALUE) ? -1:ans;
    }
}
*/
// TABULATION
/*class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        long[][] dp = new long[n][amount+1];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                if (j == 0) {
                    dp[i][j] = 0;
                } else if (i == 0) {
                    dp[i][j] = (j % coins[i] == 0) ? j / coins[i] : Integer.MAX_VALUE;
                } else {
                    long skip = dp[i - 1][j]; // Skip the current coin
                    long pick = (j - coins[i] >= 0) ? dp[i][j - coins[i]] + 1 : Integer.MAX_VALUE;
                    dp[i][j] = Math.min(skip, pick);
                }
            }
        }
        return dp[n - 1][amount] == Integer.MAX_VALUE ? -1 : (int) dp[n - 1][amount];
    }
}*/
// Ques-8-) Leetcode 516(Medium) Longest Palindromic Subsequence
// RECURSION + MEMOIZATION
/*
class Solution {
        public int lcs(int i,int j,StringBuilder a,StringBuilder b,int[][] dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(a.charAt(i)==b.charAt(j)) return (dp[i][j] = (1+ lcs(i-1,j-1,a,b,dp)));
        else return (dp[i][j] = Math.max(lcs(i-1,j,a,b,dp),lcs(i,j-1,a,b,dp)));
    }
    public int longestCommonSubsequence(String text1, String text2) {
        StringBuilder  a = new StringBuilder(text1);
        StringBuilder  b = new StringBuilder(text2);
        int m=a.length(), n=b.length();
        // i= m-1 to 0 | j=n-1 to 0
        int[][] dp = new int[m][n];
        for(int i=0;i<dp.length;i++) Arrays.fill(dp[i],-1);
        return lcs(m-1,n-1,a,b,dp);
    }
    public String reverse(String s){
        StringBuilder sb = new StringBuilder(s);
        sb.reverse();
        s = sb.toString();
        return s;
    }
    public int longestPalindromeSubseq(String s) {
        return longestCommonSubsequence(s,reverse(s));
    }
}*/
// TABULATION
/*
class Solution {
    public String reverse(String s){
        StringBuilder sb = new StringBuilder(s);
        sb.reverse();
        s = sb.toString();
        return s;
    }
    public int longestPalindromeSubseq(String a){
        String b = reverse(a);
        int m=a.length(), n=b.length();
        // i= m-1 to 0 | j=n-1 to 0
        int[][] dp = new int[2][n+1];
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(a.charAt(i-1)==b.charAt(j-1)) 
                    dp[1][j] = 1+ dp[0][j-1];
                else dp[1][j] = Math.max(dp[0][j],dp[1][j-1]);
            }
            // Copy the 1st row to 0th row for the next time
            for(int j=0;j<=n;j++) dp[0][j] = dp[1][j];
        }
        return dp[1][n];
    }
}
*/    
// Ques-9-) Leetcode 1312(Hard) Minimum Insertion Steps to Make string Palindrome
// RECURSION + MEMOIZATION
/*
class Solution {
    public int lcs(int i,int j,StringBuilder a,StringBuilder b,int[][] dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(a.charAt(i)==b.charAt(j)) return (dp[i][j] = (1+ lcs(i-1,j-1,a,b,dp)));
        else return (dp[i][j] = Math.max(lcs(i-1,j,a,b,dp),lcs(i,j-1,a,b,dp)));
    }
    public int longestCommonSubsequence(String text1, String text2) {
        StringBuilder  a = new StringBuilder(text1);
        StringBuilder  b = new StringBuilder(text2);
        int m=a.length(), n=b.length();
        // i= m-1 to 0 | j=n-1 to 0
        int[][] dp = new int[m][n];
        for(int i=0;i<dp.length;i++) Arrays.fill(dp[i],-1);
        return lcs(m-1,n-1,a,b,dp);
    }
    public String reverse(String s){
        StringBuilder sb = new StringBuilder(s);
        sb.reverse();
        s = sb.toString();
        return s;
    }
    public int longestPalindromeSubseq(String s) {
        return longestCommonSubsequence(s,reverse(s));
    }
    public int minInsertions(String s) {
        int lps = longestPalindromeSubseq(s);
        return s.length()-lps;
    }
}
*/
// TABULATION
/*
class Solution {
    public String reverse(String s){
        StringBuilder sb = new StringBuilder(s);
        sb.reverse();
        s = sb.toString();
        return s;
    }
    public int longestPalindromeSubseq(String a){
        String b = reverse(a);
        int m=a.length(), n=b.length();
        // i= m-1 to 0 | j=n-1 to 0
        int[][] dp = new int[2][n+1];
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(a.charAt(i-1)==b.charAt(j-1)) 
                    dp[1][j] = 1+ dp[0][j-1];
                else dp[1][j] = Math.max(dp[0][j],dp[1][j-1]);
            }
            // Copy the 1st row to 0th row for the next time
            for(int j=0;j<=n;j++) dp[0][j] = dp[1][j];
        }
        return dp[1][n];
    }
    public int minInsertions(String s) {
        int lps = longestPalindromeSubseq(s);
        return s.length()-lps;
    }
}
*/
// Ques-) Leetcode 583(Medium) Delete Operation for 2 Strings.
// RECURSION + MEMOIZATION
/*
class Solution {
        public int lcs(int i,int j,StringBuilder a,StringBuilder b,int[][] dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(a.charAt(i)==b.charAt(j)) return (dp[i][j] = (1+ lcs(i-1,j-1,a,b,dp)));
        else return (dp[i][j] = Math.max(lcs(i-1,j,a,b,dp),lcs(i,j-1,a,b,dp)));
    }
    public int longestCommonSubsequence(String text1, String text2) {
        StringBuilder  a = new StringBuilder(text1);
        StringBuilder  b = new StringBuilder(text2);
        int m=a.length(), n=b.length();
        // i= m-1 to 0 | j=n-1 to 0
        int[][] dp = new int[m][n];
        for(int i=0;i<dp.length;i++) Arrays.fill(dp[i],-1);
        return lcs(m-1,n-1,a,b,dp);
    }
    public int minDistance(String word1, String word2) {
        return word1.length() + word2.length() - 2*longestCommonSubsequence(word1,word2);
    }
}
*/
// TABULATION
/*
class Solution {
    public int longestCommonSubsequence(String a, String b) {
        int m=a.length(), n=b.length();
        // i= m-1 to 0 | j=n-1 to 0
        int[][] dp = new int[2][n+1];
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(a.charAt(i-1)==b.charAt(j-1)) 
                    dp[1][j] = 1+ dp[0][j-1];
                else dp[1][j] = Math.max(dp[0][j],dp[1][j-1]);
            }
            // Copy the 1st row to 0th row for the next time
            for(int j=0;j<=n;j++) dp[0][j] = dp[1][j];
        }
        return dp[1][n];
    }
    public int minDistance(String word1, String word2) {
        return word1.length() + word2.length() - 2*longestCommonSubsequence(word1,word2);
    }
}*/
// Ques-10-) Leetcode 72(Medium) Edit Distance
// RECURSION + MEMOIZATION
/*
class Solution {
    public int minSteps(int i,int j,StringBuilder a,StringBuilder b,int[][] dp){
        if(i==-1) return j+1;
        if(j==-1) return i+1;
        if(dp[i][j]!=-1) return dp[i][j];
        if(a.charAt(i)==b.charAt(j))
            return dp[i][j]=minSteps(i-1,j-1,a,b,dp);
        else{
            int del = minSteps(i-1,j,a,b,dp);
            int ins = minSteps(i,j-1,a,b,dp);
            int rep = minSteps(i-1,j-1,a,b,dp);
            return dp[i][j] = (1 + Math.min(del,Math.min(ins,rep)));
        }
    }
    public int minDistance(String word1, String word2) {
        StringBuilder a = new StringBuilder(word1);
        StringBuilder b = new StringBuilder(word2);
        int m = a.length();
        int n = b.length();
        int[][] dp = new int[m][n];
        for(int i=0;i<dp.length;i++) Arrays.fill(dp[i],-1);
        return minSteps(m-1,n-1,a,b,dp);
    }
}
*/
// TABULATION
/*
class Solution {
    public int minDistance(String a, String b) {
        int m = a.length(), n = b.length();
        if(m==0) return n;
        if(n==0) return m;
        int[][] dp = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int p = (i>=1 && j>=1) ? dp[i-1][j-1] : (i==0 ? j:i);
                int q = (j>=1) ? dp[i][j-1] : i;
                int r = (i>=1) ? dp[i-1][j] : j;
                if(a.charAt(i)==b.charAt(j)) dp[i][j]= p;
                else{
                    dp[i][j] = (1 + Math.min(r,Math.min(q,p)));
                }
            }
        }
        return dp[m-1][n-1];
    }
}
*/
// Ques-1-) Leetcode 96(Medium) Unique Binary Search Trees
/*class Solution {
    public int numTrees(int n) {
        if(n<=1) return 1;
        int[] dp = new int[n+1];
        dp[0]=1;dp[1]=1;dp[2]=2;
        for(int i=3;i<=n;i++){
            for(int j=1;j<=i;j++){
                dp[i] += (dp[j-1] * dp[i-j]);
            }
        }
        return dp[n];
    }
}*/
// Ques-1-) Rat in a maze-1 [2 directions]
// Leetcode 62(Medium) Unique Paths
/*
class Solution {
    public int maze(int m,int n,int[][] dp){
        if(m==1||n==1) return 1;
        if(dp[m][n]!=-1) return dp[m][n];
        int rw = maze(m,n-1,dp);
        int cw = maze(m-1,n,dp);
        return dp[m][n] = rw+cw;
    }
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m+1][n+1];
        for(int i=0;i<m+1;i++){
            for(int j=0;j<n+1;j++){
                dp[i][j] = -1;
            }
        }
        return maze(m,n,dp);
    }
}
*/
// Ques-2-) Rat in a maze-2 (4 directions)
    private static void print(int sr,int sc, int er, int ec,String s,boolean[][] isVisited){
        if(sr<0 || sc<0) return;
        if(sr>er || sc>ec) return;
        if(isVisited[sr][sc]) return;
        if(sr==er && sc==ec){
            System.out.println(s);
            return;
        } 
        isVisited[sr][sc] = true;
        // go right
        print(sr,sc+1,er,ec,s+"R",isVisited);
        // go down
        print(sr+1,sc,er,ec,s+"D",isVisited);
        // go left
        print(sr,sc-1,er,ec,s+"L",isVisited);
        // go up
        print(sr-1,sc,er,ec,s+"U",isVisited);
        isVisited[sr][sc] = false; //backtracking

    }
    public static void main(String[] args) {
        int rows = 3;
        int cols = 3;
        boolean[][] isVisited = new boolean[rows][cols];
        print(0,0,rows-1,cols-1,"",isVisited);
    }
// Ques-3-) Leetcode 63(Medium) Unique Path-II
/*
class Solution {
    public int maze(int m,int n,int[][] dp,int[][] arr){
        if (m == 0 || n == 0 || arr[m - 1][n - 1] == 1) return 0;
        if (m == 1 && n == 1) return 1; 
        if(dp[m][n]!=-1) return dp[m][n];
        int rw = maze(m,n-1,dp,arr);
        int cw = maze(m-1,n,dp,arr);
        return dp[m][n] = rw+cw;
    }
    public int uniquePathsWithObstacles(int[][] arr) {
        int m=arr.length, n =arr[0].length;
        int[][] dp = new int[m+1][n+1];
        for(int i=0;i<m+1;i++){
            for(int j=0;j<n+1;j++){
                dp[i][j] = -1;
            }
        }
        return maze(m,n,dp,arr);
    }
}
*/
// Ques-3-) GFG Rat in a maze-3 
// Method-1
/*
class Solution {
    // Function to find all possible paths
    public static void print(int sr, int sc, int er, int ec, String s, boolean[][] isVisited, ArrayList<String> ans, ArrayList<ArrayList<Integer>> arr) {
        // Base conditions
        if (sr < 0 || sc < 0 || sr > er || sc > ec || isVisited[sr][sc] || arr.get(sr).get(sc) == 0) {
            return;
        }
        if (sr == er && sc == ec) {
            ans.add(s);
            return;
        }
        // Mark the cell as visited
        isVisited[sr][sc] = true;
        // Explore all four direction
        print(sr + 1, sc, er, ec, s + "D", isVisited, ans, arr); // Down
        print(sr, sc - 1, er, ec, s + "L", isVisited, ans, arr); // Left
        print(sr, sc + 1, er, ec, s + "R", isVisited, ans, arr); // Right
        print(sr - 1, sc, er, ec, s + "U", isVisited, ans, arr); // Up
        // Backtrack
        isVisited[sr][sc] = false;
    }
    public ArrayList<String> findPath(ArrayList<ArrayList<Integer>> arr) {
        int rows = arr.size();
        if (rows == 0) return new ArrayList<>();
        int cols = arr.get(0).size();
        ArrayList<String> ans = new ArrayList<>();
        boolean[][] isVisited = new boolean[rows][cols];
        // Call the recursive function
        print(0, 0, rows - 1, cols - 1, "", isVisited, ans, arr);
        return ans;
    }
}
*/
// METHOD-2 OPTIMIZED
/*
class Solution {
    // Function to find all possible paths
    public static void print(int sr, int sc, int er, int ec, String s,ArrayList<String> ans, ArrayList<ArrayList<Integer>> arr) {
        // Base conditions
        if (sr < 0 || sc < 0 || sr > er || sc > ec || arr.get(sr).get(sc) == 0) {
            return;
        }
        if (sr == er && sc == ec) {
            ans.add(s);
            return;
        }
        if(arr.get(sr).get(sc)==-1) return; // Already visited
        // Mark the cell as visited
        arr.get(sr).set(sc,-1);
        // Explore all four direction
        print(sr + 1, sc, er, ec, s + "D", ans, arr); // Down
        print(sr, sc - 1, er, ec, s + "L", ans, arr); // Left
        print(sr, sc + 1, er, ec, s + "R", ans, arr); // Right
        print(sr - 1, sc, er, ec, s + "U", ans, arr); // Up
        // Backtrack
        arr.get(sr).set(sc,1);
        
    }
    public ArrayList<String> findPath(ArrayList<ArrayList<Integer>> arr) {
        int rows = arr.size();
        if (rows == 0) return new ArrayList<>();
        int cols = arr.get(0).size();
        ArrayList<String> ans = new ArrayList<>();
        // Call the recursive function
        print(0, 0, rows - 1, cols - 1, "", ans, arr);
        return ans;
    }
}
*/
// Ques-5-) Leetcode 46(Medium) Permutations
// METHOD-1 (DONE BY ME) || (BETTER)
/*
class Solution {
    public void p(int i,int[] arr,List<Integer> a,List<List<Integer>> ans){
        if(a.size()==arr.length){
            ans.add(new ArrayList<>(a));
        }
        for(int j=0;j<arr.length;j++){
            if(a.contains(arr[j])) continue;
            a.add(arr[j]);
            p(i+1,arr,a,ans);
            a.remove(a.size()-1);
        }
    }
    public List<List<Integer>> permute(int[] arr) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> a = new ArrayList<>();
        p(0,arr,a,ans);
        return ans;
    }
}*/
// METHOD -2 (BY SIR PW)
/*
class Solution {
    public void helper(int[] nums,List<Integer> ds,boolean[] isValid,List<List<Integer>> ans){
        if(ds.size()==nums.length){
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(isValid[i]==false){
                ds.add(nums[i]);
                isValid[i] = true;
                helper(nums,ds,isValid,ans);
                isValid[i] = false;
                ds.remove(ds.size()-1);
            }
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        boolean[] isValid = new boolean[nums.length];
        helper(nums,ds,isValid,ans);
        return ans;
    }
}
*/
// METHOD-3  (BEST)
/*
class Solution {
    public void swap(int i,int j,int[] arr){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
    public void helper(int[] nums,int i,List<List<Integer>> ans){
        int n = nums.length;
        if (i == n) { 
            List<Integer> l = new ArrayList<>();
            for (int num : nums) {
                l.add(num);
            }
            ans.add(l);
            return;
        }
        for(int j=i;j<n;j++){
            swap(i,j,nums);
            helper(nums,i+1,ans);
            swap(i,j,nums);
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        helper(nums,0,ans);
        return ans;
    }
}
*/
// Ques-6-) Leetcode-51(Hard) N Queens
/*
class Solution {
    public boolean isSafe(char[][] arr,int row,int col){
        int n=arr.length;
        // check row
        for(int j=0;j<n;j++){
            if(arr[row][j]=='Q') return false;
        }
        // check col
        for(int i=0;i<n;i++){
            if(arr[i][col]=='Q') return false;
        }
        // check north-east
        int i = row, j=col;
        while(i>=0 && j<n){
            if(arr[i][j]=='Q') return false;
            i--;j++;
        }
        i = row; j=col;
        while(i<n && j<n){
            if(arr[i][j]=='Q') return false;
            i++;j++;
        }
        i = row; j=col;
        while(i>=0 && j>=0){
            if(arr[i][j]=='Q') return false;
            i--;j--;
        }        
        i = row; j=col;
        while(i<n && j>=0){
            if(arr[i][j]=='Q') return false;
            i++;j--;
        }
        return true;
    }
    public void nqueen(char[][] board,int row,List<List<String>> ans){
        int n=board.length;
        if(row==n){
            // convert char[][] into list of string
            List<String> l = new ArrayList<>();
            for(int i=0;i<n;i++){
                String s = "";
                for(int j=0;j<n;j++){
                    s+=board[i][j];
                }
                l.add(s);
            }
            ans.add(new ArrayList<>(l));
            return;
        }
        for(int j=0;j<n;j++){
            if(isSafe(board,row,j)){
                board[row][j] = 'Q';
                nqueen(board,row+1,ans);
                board[row][j] = '.';
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char[][] board = new char[n][n];
        for(int i=0;i<n;i++) Arrays.fill(board[i],'.');
        nqueen(board,0,ans);
        return ans;
    }
}
*/
// Ques-7-) Leetcode 52(Hard) N Queens II
// METHOD-1 (JUST COPY PAST)
/*
class Solution {
    public boolean isSafe(char[][] arr,int row,int col){
        int n=arr.length;
        // check row
        for(int j=0;j<n;j++){
            if(arr[row][j]=='Q') return false;
        }
        // check col
        for(int i=0;i<n;i++){
            if(arr[i][col]=='Q') return false;
        }
        // check north-east
        int i = row, j=col;
        while(i>=0 && j<n){
            if(arr[i][j]=='Q') return false;
            i--;j++;
        }
        i = row; j=col;
        while(i<n && j<n){
            if(arr[i][j]=='Q') return false;
            i++;j++;
        }
        i = row; j=col;
        while(i>=0 && j>=0){
            if(arr[i][j]=='Q') return false;
            i--;j--;
        }        
        i = row; j=col;
        while(i<n && j>=0){
            if(arr[i][j]=='Q') return false;
            i++;j--;
        }
        return true;
    }
    public void nqueen(char[][] board,int row,List<List<String>> ans){
        int n=board.length;
        if(row==n){
            // convert char[][] into list of string
            List<String> l = new ArrayList<>();
            for(int i=0;i<n;i++){
                String s = "";
                for(int j=0;j<n;j++){
                    s+=board[i][j];
                }
                l.add(s);
            }
            ans.add(new ArrayList<>(l));
            return;
        }
        for(int j=0;j<n;j++){
            if(isSafe(board,row,j)){
                board[row][j] = 'Q';
                nqueen(board,row+1,ans);
                board[row][j] = '.';
            }
        }
    }
    public int totalNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char[][] board = new char[n][n];
        for(int i=0;i<n;i++) Arrays.fill(board[i],'.');
        nqueen(board,0,ans);
        return ans.size();
    }
}
*/
// METHOD-2
/*
class Solution {
    public boolean isSafe(char[][] arr,int row,int col){
        int n=arr.length;
        // check row
        for(int j=0;j<n;j++){
            if(arr[row][j]=='Q') return false;
        }
        // check col
        for(int i=0;i<n;i++){
            if(arr[i][col]=='Q') return false;
        }
        // check north-east
        int i = row, j=col;
        while(i>=0 && j<n){
            if(arr[i][j]=='Q') return false;
            i--;j++;
        }
        i = row; j=col;
        while(i<n && j<n){
            if(arr[i][j]=='Q') return false;
            i++;j++;
        }
        i = row; j=col;
        while(i>=0 && j>=0){
            if(arr[i][j]=='Q') return false;
            i--;j--;
        }        
        i = row; j=col;
        while(i<n && j>=0){
            if(arr[i][j]=='Q') return false;
            i++;j--;
        }
        return true;
    }
    public void nqueen(char[][] board,int row,int[] ans){
        int n=board.length;
        if(row==n){
            ans[0]++;
            return;
        }
        for(int j=0;j<n;j++){
            if(isSafe(board,row,j)){
                board[row][j] = 'Q';
                nqueen(board,row+1,ans);
                board[row][j] = '.';
            }
        }
    }
    public int totalNQueens(int n) {
        char[][] board = new char[n][n];
        for(int i=0;i<n;i++) Arrays.fill(board[i],'.');
        int[] ans={0};
        nqueen(board,0,ans);
        return ans[0];
    }
}
*/
class Solution {
    public boolean helper(int[][] grid,int row, int col,int num){
        int n = grid.length;
        if(grid[row][col]==n*n-1) return true;
        int i,j;
        // 2 up 1 right
        i=row-2; j=col+1;
        if(i>=0 && j<n && grid[i][j]==num+1) return helper(grid,i,j,num+1);
        // 2 up 1 left
        i=row-2; j=col-1;
        if(i>=0 && j>=0 && grid[i][j]==num+1) return helper(grid,i,j,num+1);
        // 2 down 1 right
        i=row+2; j=col+1;
        if(i<n && j<n && grid[i][j]==num+1) return helper(grid,i,j,num+1);
        // 2 down 1 left
        i=row+2; j=col-1;
        if(i<n && j>=0 && grid[i][j]==num+1) return helper(grid,i,j,num+1);
        // 2 right 1 up
        i=row-1;j=col+2;
        if(i>=0 && j<n && grid[i][j]==num+1) return helper(grid,i,j,num+1);
        // 2 right 1 down
        i=row+1;j=col+2;
        if(i<n && j<n && grid[i][j]==num+1) return helper(grid,i,j,num+1);       
        // 2 left 1 up
        i=row-1;j=col-2;
        if(i>=0 && j>=0 && grid[i][j]==num+1) return helper(grid,i,j,num+1);
        // 2 left 1 down
        i=row+1;j=col-2;
        if(i<n && j>=0 && grid[i][j]==num+1) return helper(grid,i,j,num+1);   
        return false;    
    }
    public boolean checkValidGrid(int[][] grid) {
        if(grid[0][0]!=0) return false;
        return helper(grid,0,0,0);
    }
}
// Ques-9-) Print maximum number of knights that can be placed in a givven n*n chessboard.
public static boolean isSafe(char[][] board,int row,int col){
    int n = board.length;
    int i,j;
    // 2 up 1 right
    i=row-2; j=col+1;
    if(i>=0 && j<n && board[i][j]=='K') return false;
    // 2 up 1 left
    i=row-2; j=col-1;
    if(i>=0 && j>=0 && board[i][j]=='K') return false;
    // 2 down 1 right
    i=row+2; j=col+1;
    if(i<n && j<n && board[i][j]=='K') return false;
    // 2 down 1 left
    i=row+2; j=col-1;
    if(i<n && j>=0 && board[i][j]=='K') return false;
    // 2 right 1 up
    i=row-1;j=col+2;
    if(i>=0 && j<n && board[i][j]=='K') return false;
    // 2 right 1 down
    i=row+1;j=col+2;
    if(i<n && j<n && board[i][j]=='K') return false;  
    // 2 left 1 up
    i=row-1;j=col-2;
    if(i>=0 && j>=0 && board[i][j]=='K') return false;
    // 2 left 1 down
    i=row+1;j=col-2;
    if(i<n && j>=0 && board[i][j]=='K') return false;  
    return true;
}
static int maxK = -1;
public static void nKnight(char[][] board,int row,int col, int num){
    int n = board.length;
    if(row==n){
        // if(num==number){
        //     for(int i=0;i<n;i++){
        //         for(int j=0;j<n;j++){
        //             System.out.print(board[i][j]);
        //         }
        //         System.out.println();
        //     }
        //     System.out.println();
        // }
        maxK  = Math.max(maxK, num);
        return;
    }
    else if(isSafe(board,row,col)){
        board[row][col] = 'K';
        if(col!=n-1)nKnight(board,row,col+1,num+1);
        else nKnight(board,row+1,0,num+1);
        board[row][col] = 'x';
    } 
    if(col!=n-1)nKnight(board,row,col+1,num);
    else nKnight(board,row+1,0,num);
}
public static void main(String[] args) {
    int n=6;
    char[][] board = new char[n][n];
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            board[i][j] = 'x';
        }
    }
    nKnight(board,0,0,0);
    System.out.println(maxK);
}
class Solution {
    public boolean isValid(char[][]board, int row,int col,char num){
        // check row
        for(int j=0;j<9;j++){
            if(board[row][j]==num) return false;
        }
        // check col
        for(int i=0;i<9;i++){
            if(board[i][col]==num) return false;
        }
        // check 3x3 grid
        int sr = row/3 *3;
        int sc = col/3 *3;
        for(int i=sr;i<sr+3;i++){
            for(int j=sc;j<sc+3;j++){
                if(board[i][j]==num) return false;
            }
        }
        return true;
    }
    public boolean isValidSudoku(char[][] board) {
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                char num=board[i][j];
                board[i][j] = ',';
                if(num!='.' && isValid(board,i,j,num)==false) return false;
                board[i][j] = num;
            }
        }
        return true;
    }
}
// Ques-11-) Leetcode 37(Medium) Sudoku Solver
// METHOD -1
/*
class Solution {
    public boolean isValid(char[][]board, int row,int col,char num){
        // check row
        for(int j=0;j<9;j++){
            if(board[row][j]==num) return false;
        }
        // check col
        for(int i=0;i<9;i++){
            if(board[i][col]==num) return false;
        }
        // check 3x3 grid
        int sr = row/3 *3;
        int sc = col/3 *3;
        for(int i=sr;i<sr+3;i++){
            for(int j=sc;j<sc+3;j++){
                if(board[i][j]==num) return false;
            }
        }
        return true;
    }
    public void solve(char[][] board,int row,int col,char[][] grid){
        if(row==9){
            for(int i=0;i<9;i++){
                for(int j=0;j<9;j++){
                    grid[i][j]=board[i][j];
                }
            }
            return;
        }
        if(board[row][col]!= '.' ){
            if(col!=8) solve(board,row,col+1,grid); 
            else solve(board,row+1,0,grid); 
        } else{
            for(char ch='1';ch<='9';ch++){
                if(isValid(board,row,col,ch)){
                    board[row][col]=ch;
                    if(col!=8) solve(board,row,col+1,grid); 
                    else solve(board,row+1,0,grid); 
                    board[row][col]='.'; // backtracking        
                }
            }
        }
    }
    public void solveSudoku(char[][] board) {
        char[][] grid = new char[9][9];
        solve(board,0,0,grid);
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                board[i][j]=grid[i][j];
            }
        }
    }
}
*/
// METHOD-2
/*class Solution {
    static int check=0;
    public boolean isValid(char[][]board, int row,int col,char num){
        // check row
        for(int j=0;j<9;j++){
            if(board[row][j]==num) return false;
        }
        // check col
        for(int i=0;i<9;i++){
            if(board[i][col]==num) return false;
        }
        // check 3x3 grid
        int sr = row/3 *3;
        int sc = col/3 *3;
        for(int i=sr;i<sr+3;i++){
            for(int j=sc;j<sc+3;j++){
                if(board[i][j]==num) return false;
            }
        }
        return true;
    }
    public void solve(char[][] board,int row,int col){
        if(row==9){
            check=1;
            return;
        }
        else if(board[row][col]!= '.' ){
            if(col!=8) solve(board,row,col+1); 
            else solve(board,row+1,0); 
        } else{
            for(char ch='1';ch<='9';ch++){
                if(isValid(board,row,col,ch)){
                    board[row][col]=ch;
                    if(col!=8) solve(board,row,col+1); 
                    else solve(board,row+1,0); 
                    if(check==1) return;
                    board[row][col]='.'; // backtracking        
                }
            }
        }
    }
    public void solveSudoku(char[][] board) {
        solve(board,0,0);
        check=0;
    }
}
*/
// Ques-2-) Leetcode 1005(Easy) Maximize Sum Of Array After K Negations
// MY APPROACH
/*
class Solution {
    public int Min(int[] arr){
        int mn=Integer.MAX_VALUE;
        int idx = -1;
        for(int i=0;i<arr.length;i++){
            if (arr[i] < mn) {  
                mn = arr[i];                 
                idx = i;             
            }         
        }
        return idx;
    }
    public int largestSumAfterKNegations(int[] arr, int k) {
        for(int i=0;i<k;i++){
            int idx = Min(arr);
            arr[idx] *= -1;
        }
        int sum =0;
        for(int ele:arr){
            sum += ele;
        }
        return sum;
    }
}
*/
// OPTIMISED
/*
class Solution {
    public int largestSumAfterKNegations(int[] arr, int k) {
        Arrays.sort(arr);
        int i=0;
        while(i<arr.length && arr[i]<0 && k>0){
            arr[i] *= -1;
            i++;k--;
        }
        if(k%2==1){
            Arrays.sort(arr);
            arr[0] *=-1;   
        }
        int sum=0;
        for(int ele : arr){
            sum +=ele;
        }
        return sum;
    }
}
*/
// Ques-3-) GFG Fractional Knapsack
//  SOLUTION BY SELF   
//  T.C. = O(n²)
/*
class Solution {
    int maxi(double[] arr) {
        double max = -Double.MAX_VALUE;
        int idx = -1;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
                idx = i;
            }
        }
        return idx;
    }
    double fractionalKnapsack(List<Integer> val, List<Integer> wt, int c) {
        int[] v = val.stream().mapToInt(i -> i).toArray();
        int[] w = wt.stream().mapToInt(i -> i).toArray();
        double[] arr = new double[w.length];
        for (int i = 0; i < w.length; i++) {
            arr[i] = (double) v[i] / w[i];
        }
        double ans = 0.0;
        int sumW=0;
        int sumV=0;
        for(int i=0;i<w.length;i++){
            sumW += w[i];
            sumV += v[i];
        }
        if(sumW<=c) return sumV;
        while (c > 0) {
            int i = maxi(arr);
            if (i == -1) break;
            if (w[i] <= c) {
                ans += v[i];
                arr[i] = 0;
                c -= w[i];
            } else {
                ans += arr[i] * c;
                c = 0;
            }
        }
        return ans;
    }
}
*/
// OPTIMIZED
/*
class Solution {
static class Item {
        int value, weight;
        double ratio;
        Item(int value, int weight) {
            this.value = value;
            this.weight = weight;
            this.ratio = (double) value / weight;
        }
    }
    double fractionalKnapsack(List<Integer> val, List<Integer> wt, int c) {
        int n = val.size();
        Item[] items = new Item[n];
        for (int i = 0; i < n; i++) {
            items[i] = new Item(val.get(i), wt.get(i));
        }
        Arrays.sort(items, (a, b) -> Double.compare(b.ratio, a.ratio));
        double ans = 0.0;
        for (Item item : items) {
            if (item.weight <= c) {
                ans += item.value;
                c -= item.weight;
            } else {
                ans += item.ratio * c;
                break;
            }
        }
        return ans;
    }
}
*/
// Ques-4-) Leetcode 1710(Easy) Minimum Units on a Truck
/*
class Solution {
    public int maximumUnits(int[][] arr, int s) {
        Arrays.sort(arr,(a1,a2)->a2[1]-a1[1]);
        int sum=0;
        for(int i=0;i<arr.length;i++){
            int boxNo=arr[i][0];
            int unit = arr[i][1];
            int min = Math.min(boxNo,s);
            s-=min;
            sum +=min*unit;
            if(s==0) return sum;
        }
        return sum;
    }
}
*/
// Ques-5-) Leetcode 881(Medium) Boats to Save People
/*
class Solution {
    public int numRescueBoats(int[] people, int limit) {
        Arrays.sort(people);
        int left = 0, right = people.length - 1;
        int ans = 0;
        while(left <= right) {
            if(people[left] + people[right] <= limit) {
                left++;
                right--;
            } else {
                right--;
            }
            ans++;
        }
        return ans;
    }
}
*/
// Ques-6-) Leetcode 781(Medium) Rabbit in Forest
/*
class Solution {
    public int numRabbits(int[] arr) {
        int ans=0;
        Map<Integer,Integer> freq = new HashMap<>();
        for(int ele:arr){
            freq.put(ele+1,freq.getOrDefault(ele+1,0)+1);
        }
        for(int key : freq.keySet()){
            int val = freq.get(key);
            int q = val/key;
            int r = val%key;
            ans += q*key;
            if(r>0){
                ans+=key;
            }
        }
        return ans;
    }
*/
HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">    <link rel="stylesheet" href="style.css">
    <title>Portfolio</title>
</head>
<body>
    <header class="header">
        <div class="header-box">
            <h1 class="logo">Portfolio</h1>
            <div class="navbar">
                <ul class="list">
                    <li><a href="#home" class="main-nav-link">Home</a></li>
                    <li><a href="#about" class="main-nav-link">About</a></li>
                    <li><a href="#education" class="main-nav-link">Education</a></li>
                    <li><a href="#skill" class="main-nav-link">Skills</a></li>
                    <li><a href="#contact" class="main-nav-link nav-cta">Contact</a></li>
                </ul>
            </div>
        </div>
    </header>
    <main>
        <section class="home-section" id="home">
            <div class="home container grid">
                <div class="home-intro">
                    <p class="home-txt">Hi There,I'm Nikhil Singh</p>
                    <p class="home-branch">Computer Science Student</p>
                    <p class="home-sub">Passionate about Web Development & AIML</p>
                </div>
                <div class="home-img">
                    <img src="img/Nikhil.jpg">
                </div>
            </div>
        </section>
        <section class="about-section" id="about">
            <div class="container">
                <h3 class="subheading">About me</h3>
                <p class="about-txt"> I am Nikhil Singh, a passionate Computer Science student specializing in Artificial Intelligence and Machine Learning. A passionate computer science student with interests in web development and artificial intelligence.I am dedicated to leveraging AI to solve real-world problems and enhancetechnological advancements. Currently, I am proficient in programming languages like C and C++ and have foundational knowledge in web development using HTML and CSS. I am enthusiastic about learning new technologies and applying my knowledge to solve real-world problems. With a keen interest in innovationand growth, I am excited to dive deeper into the ever-evolving fields of AI and machine learning whileenhancing my technical and analytical skills.</p>
            </div>
        </section>
        <section class="edu-section" id="education">
            <div class="container">
                <h3 class="subheading">Education</h3>
                <div class="edu">
                    <div class="edu-box edu-s">
                        <p>Secondary</p>
                        <ul>
                            <li><strong>School: </strong> Avadh Collegiate</li>
                            <li><strong>Board: </strong> CBSE</li>
                            <li><strong>Duration: </strong> 2019-21</li>
                            <li><strong>Percentage: </strong> 82%</li>
                        </ul>
                    </div>
                    <div class="edu-box edu-ss">
                        <p>Senior Secondary</p>
                        <ul>
                            <li><strong>School: </strong> Universal City Convent</li>
                            <li><strong>Board: </strong> UP Board</li>
                            <li><strong>Duration: </strong> 2021-23</li>
                            <li><strong>Percentage: </strong> 61%</li>
                        </ul>
                    </div>
                    <div class="edu-box edu-btech">
                        <p>Graduation</p>
                        <ul>
                            <li><strong>College: </strong> SRGI Lucknow</li>
                            <li><strong>Branch: </strong> Computer Science</li>
                            <li><strong>Duration: </strong> 2023-Present</li>
                            <li><strong>Current CGPA: </strong> 7.28%</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>
        <section class="skills-section" id="skill">
            <div class="container">
                <h3 class="subheading">Skills</h3>
                <div class="skills">
                    <p>HTML</p>
                    <p>CSS</p>
                    <p>Bootstrap</p>
                    <p>C</p>
                    <p>C++</p>
                    <p>Python</p>
                </div>
            </div>
        </section>
        <section class="contact-section" id="contact">
            <div class="container">
                <h3 class="subheading">Contact Us</h3>
                <div class="cta">
                    <div class="cta-text-box">
                        <form action="#"  class="cta-form">
                            <div>
                                <label for="full-name">Full Name</label>
                                <input type="text" id="full-name" placeholder="John Smith" required>
                            </div>
                            <div>   
                                <label for="email">Email address</label>
                                <input type="e-mail" id="email" placeholder="abc@example.com" required>
                            </div>
                            <div>
                                <label for="contact">Contact no.</label> 
                                <input type="tel" id="contact" placeholder="8888888888" required>
                            </div>
                            <button class="btn--form">Submit</button>
                        </form>
                    </div>
                    <div class="cta-img-box" role="img"></div>
                </div>
            </div>
        </section>
    </main>
</body>
</html>
CSS
/* 
PRIMARY COLOR
#002349
- Font sizes (px)
10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98
- Font weights
Default: 400
Medium: 500
Semi-bold: 600
Bold: 700
- Line heights
Default: 1
Small: 1.05
Medium: 1.2
Paragraph default: 1.6
*/
*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}
html{
    font-size: 62.5%;
}
body{
    font-family: "Montserrat",sans-serif;
    line-height: 1;
    font-weight: 400;
    color: #555;
}
.container{
    max-width: 120rem;
    padding: 0 3.2rem;
    margin: 0 auto;
}
.grid{
    display: grid;
    column-gap: 6.4rem;
    row-gap: 9.6rem;
}
.grid--2-cols{
    grid-template-columns: repeat(2,1fr);
}
.grid--3-cols{
    grid-template-columns: repeat(3,1fr);
}
.subheading{
    display: inline-block;
    font-size: 3.2rem;
    font-weight: 600;
    color: #e7473c;
    text-transform: uppercase;
    margin-bottom: 4rem;
    margin-top: 4rem;
    letter-spacing: 0.75px;
    text-align: center;
    font-style: italic;
    border-bottom: 2px solid #e7473c;
}
/* ****************************** */
/* ************* HEADER ************ */
/* ****************************** */
.header{
    position: sticky; /* Fix the header to the viewport */
    top: 1;
    z-index: 100;
}
.header-box{
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #170706;
    background-image: linear-gradient(270deg,#74241e,#170706);
    box-shadow: 2.4rem 2.4rem 4.8rem rgba(0,0,0,0.1);
    height: 9.6rem;
    padding: 0 4.8rem;
}
.logo{
    font-size: 4.4rem;
    font-weight: 700;
    color: #f8c8c5;
    letter-spacing: 2.5px;
}
.list{
    list-style: none;
    display: flex;
    align-items: center;
    gap: 3.2rem;
    color: #999;
}
.list li a{
    color: #333;
    background-color: #fdedec;
    padding: 0.8rem 1.4rem;
    border-radius: 11rem;
    font-size: 2rem;
    font-weight: 500;
    text-decoration: none;

}
.list li{
    transition: all 0.5s;
    box-shadow: 0 2.4rem 4.8rem rgba(0,0,0,0.2);
}
.list li:hover{
    transform: scale(1.05);
    box-shadow: 0 3.2rem 6.4rem rgba(0,0,0,0.1);
}
/* ****************************** */
/* ************* HOME ************ */
/* ****************************** */
.home-section{
    padding-bottom: 4.8rem;
    background-color: #f8c8c5;
    background-image: linear-gradient(#74241e,#f8c8c5);
}
.home{
    grid-template-columns: 3fr 2fr;
    align-items: center;
    justify-items: center;
}
.home-intro{
    padding: 0rem 9.6rem;
    color: #222;
}
.home-txt{
    font-size: 5.6rem;
    font-weight: 600;
    padding-bottom: 2.8rem;
    line-height: 1.05;
    letter-spacing: 2px;
}
.home-branch{
    font-size: 2.8rem;
    font-weight: 500;
    padding-bottom: 1.4rem;
}
.home-sub{
    font-size: 1.4rem;
    font-weight: 400;
    line-height: 1.4;
}
.home-img{
    align-self: center;
    padding: 4.4rem;
}
.home-img img{
    width: 100%;
    border-radius: 50%;
}
/* ****************************** */
/* ************* ABOUT ************ */
* ****************************** */
.about-section{
    padding-bottom: 9.6rem;
}
.about-txt{
    font-size: 2.2rem;
    background-color: #fdedec;
    padding: 4.4rem;
    border-radius: 11px;
    line-height: 1.8;
}
/* ****************************** */
/* ************* EDUCATION ************ */
/* ****************************** */
.edu-section{
    padding-bottom: 9.6rem;
}
.edu{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 7rem;
    padding-top: 2.2rem;
}
.edu-box{
    overflow: hidden;
    border-radius: 11px;
    transition: all 0.5s;
    box-shadow: 0 2.4rem 4.8rem rgba(0,0,0,0.1);
}
.edu-box:hover{
    transform: scale(1.05);
    box-shadow: 0 3.2rem 6.4rem rgba(0,0,0,0.1);
}
.edu-box p{
    color: #fdedec;
    font-size: 3.2rem;
    font-weight: 500;
    text-align: center;
    background-color: #ec6c63;
    padding: 2.4rem;
}
.edu-box ul{
    padding-top: 3.2rem;
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 3.2rem;
    color: #999;
    justify-content: space-around;
    padding: 2.4rem;
}
.edu-box ul li{
    font-size: 1.8rem;
    line-height: 1.1;
    font-weight: 500;
    strong{
        color: #333;
    }
}
/* ****************************** */
/* ************* SKILLS ************ */
/* ****************************** */
.skills-section{
    padding-bottom: 9.6rem;
}
.skills{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 9.6rem;
}
.skills p{
    color: #fdedec;
    background-color: #ec6c63;
    font-size: 2.2rem;
    font-weight: 600;
    line-height: 1.4;
    padding: 2rem 4rem;
    border-radius: 11rem;
    text-align: center;
    transition: all 0.5s;
    box-shadow: 0 2.4rem 4.8rem rgba(0,0,0,0.1);
}
.skills p:hover{
    transform: scale(1.05);
    box-shadow: 0 3.2rem 6.4rem rgba(0,0,0,0.1);
}
/* ****************************** */
/* ************* Contact ************ */
/* ****************************** */
.contact-section{
    padding-bottom: 9.6rem;
}
.cta{
    display: grid;
    grid-template-columns: 2fr 1fr;
    background-color: #ec6c63;
    box-shadow: 0 2.4rem 4.8rem rgba(0,0,0,0.2);
    border-radius: 11px;
    background-image: linear-gradient(to right bottom,#ec6c63,#eb984e);
    overflow: hidden;
    transition: all 0.5s;
}
.cta:hover{
    transform: scale(1.025);
    box-shadow: 0 3.2rem 6.4rem rgba(0,0,0,0.25);
}
.cta-text-box{
    padding: 4.8rem 6.4rem 6.4rem 6.4rem;
    color: #170706;
}
.cta .heading-secondary{
    /* color: #45260a; */
    color: inherit;
    margin-bottom: 3.2rem;
}
.cta-text{
    font-size: 1.8rem;
    line-height: 1.8rem;
    margin-bottom: 4.8rem;
}
.cta-img-box{
    background-image: linear-gradient(to right bottom,rgba(235, 150, 76, 0.35),rgba(231, 126, 35, 0.35)), url("./img/contact.jpg");
    background-size: cover;
    background-position: center;
}
.cta-form{
    display: grid;
    grid-template-columns: 1fr 1fr;
    column-gap: 3.2rem;
    row-gap: 2.4rem;
}
.cta-form label{
    display: block;
    font-size: 1.6rem;
    font-weight: 500;
    margin-bottom: 1.2rem;
}
.cta-form input, .cta-form select{
    width: 100%;
    padding: 1.2rem;
    font-size: 1.8rem;
    font-family: inherit;
    color: inherit;
    border: none;
    background-color: #fdedec;
    border-radius: 9px;
    box-shadow: 0 1px 2px rgba(0,0,0,0.5);
}
.cta-form input::placeholder{
    color: #aaa;
}
.btn--form{
    display: inline-block;
    font-size: 2rem;
    padding: 1.6rem 3.2rem;
    border-radius: 9px;
    text-decoration: none;
    font-weight: 600;
    border: none;
    cursor: pointer;
    font-family: inherit;
    background-color: #170706;
    color: #fdedec;
    align-self: end;
    padding: 1.2rem;
    transition: all 0.4s;
}
OMNIFOOD
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta
    name="description"
    content="Omnifood is an AI-powered food subscription that will make you eat healthy again, 365 days per year. It's tailored to your personal tastes and nutritional needs."
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="img/favicon.png" />
    <link rel="apple-touch-icon" href="img/apple-touch-icon.png" />
    <link rel="manifest" href="manifest.webmanifest" />
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link
      href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="css/general.css">
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/queries.css">
    <script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script> 
    <script defer src="https://unpkg.com/smoothscroll-polyfill@0.4.4/dist/smoothscroll.min.js" ></script> 
    <script defer src="js/script.js"></script>
    <title>Omnifood &mdash; Never cook again!</title>
</head>
<body>
    <header class="header">
        <a href="#"><img class="logo" src="img/omnifood-logo.png"></a>
        <nav class="main-nav">
            <ul class="main-nav-list">
                <li><a href="#how" class="main-nav-link">How it works</a></li>
                <li><a href="#meals" class="main-nav-link">Meals</a></li>
                <li><a href="#testimonials" class="main-nav-link">Testimonials</a></li>
                <li><a href="#pricing" class="main-nav-link">Pricing</a></li>
                <li><a href="#try" class="main-nav-link nav-cta">Try for free</a></li>
            </ul>
        </nav>
        <button class="btn-mobile-nav">
            <ion-icon class="icon-mobile-nav" name="menu-outline"></ion-icon>
            <ion-icon class="icon-mobile-nav" name="close-outline"></ion-icon>
        </button>
    </header>
    <main>
    <section class="section-hero">
        <div class="hero">
            <div class="hero-text-box">
                <h1 class="heading-primary">A healthy meal delivered to your door, every single day</h1>
                <p class="hero-description">The smart 365-days-per-year food subscription that will make you eat healthy again. Tailored to your personal tastes and nutritional needs.</p>
                <a href="#meals" class="btn btn--full margin-right-sm">Start eating well</a>
                <a href="#try" class="btn btn--outline">Learn more &darr;</a>
                <div class="delivered-meals">
                    <div class="delivered-imgs">
                        <img src="img/customers/customer-1.jpg" alt="Customer photo">
                        <img src="img/customers/customer-2.jpg" alt="Customer photo">
                        <img src="img/customers/customer-3.jpg" alt="Customer photo">
                        <img src="img/customers/customer-4.jpg" alt="Customer photo">
                        <img src="img/customers/customer-5.jpg" alt="Customer photo">
                        <img src="img/customers/customer-6.jpg" alt="Customer photo">
                    </div>
                    <p class="delivered-text"><span>250,000+</span> meals delivered last year!</p>
                </div>
            </div>
            <div class="hero-img-box">
                <img src="img/hero-min.png" class="hero-img">
            </div>
        </div>
    </section>
    <section class="section-featured">
        <div class="container">
            <h2 class="heading-featured-in">As featured in</h2>
            <div class="logos">
                <img src="img/logos/techcrunch.png" alt="Techcrunch">
                <img src="img/logos/business-insider.png" alt="Business Insider">
                <img src="img/logos/the-new-york-times.png" alt="The New York Times">
                <img src="img/logos/forbes.png" alt="Forbes">
                <img src="img/logos/usa-today.png" alt="USA Today">
            </div>
        </div>
    </section>
    <section class="section-how" id="how">
        <div class="container">
            <span class="subheading">How it works</span>
            <h2 class="heading-secondary">Your daily dose of health in 3 simple steps</h2>
        </div>
        <div class="container grid grid--2-cols grid--center-v">
            <!-- Step 01 -->
            <div class="step-text-box">
                <p class="step-number">01</p> 
                <h3 class="heading-tertiary">Tell us what you like (and what not)</h3>
                <p class="step-description">Never again waste time thinking about what to eat! Omnifood AI will create a 100% personalized weekly meal plan just for you. It makes sure you get all the nutrients and vitamins you need, no matter what diet you follow!</p>
            </div>
            <div class="step-img-box">
                <img src="img/app/app-screen-1.png" class="step-img" alt="iPhone app preferences selection screen">
            </div>
            <!-- Step 02 -->
            <div class="step-img-box">
                <img src="img/app/app-screen-2.png" class="step-img" alt="iPhone app preferences selection screen">
            </div>
            <div class="step-text-box">
                <p class="step-number">02</p> 
                <h3 class="heading-tertiary">Approve your weekly meal plan</h3>
                <p class="step-description">Once per week, approve the meal plan generated for you by Omnifood AI. You can change ingredients, swap entire meals, or even add your own recipes.</p>
            </div>
            <!-- Step 03 -->
            <div class="step-text-box">
                <p class="step-number">03</p> 
                <h3 class="heading-tertiary">Receive meals at convenient time</h3>
                <p class="step-description">Best chefs in town will cook your selected meal every day, and we will deliver it to your door whenever works best for you. You can change delivery schedule and address daily!</p>
            </div>
            <div class="step-img-box">
                <img src="img/app/app-screen-3.png" class="step-img" alt="iPhone app preferences selection screen">
            </div>
        </div>
    </section>
    <section class="section-meals" id="meals">
        <div class="container">
            <span class="subheading">Meal</span>
            <h2 class="heading-secondary">Omnifood AI chooses from 5,000+ recipes</h2>
        </div>
        <div class="container grid grid--3-cols margin-bottom-md">
            <div class="meal">
                <img src="img/meals/meal-1.jpg" class="meal-img" alt="Japanese Gyozas">
                <div class="meal-content">
                    <div class="meal-tags">
                        <span class="tag tag--veg">Vegetarian</span>
                    </div>
                    <p class="meal-title">Japanese Gyozas</p>
                    <ul class="meal-attributes">
                        <li class="meal-attribute">
                            <ion-icon class="meal-icon" name="flame-outline"></ion-icon>
                            <span><strong>650</strong> calories</span>
                        </li>
                        <li class="meal-attribute">
                            <ion-icon class="meal-icon" name="restaurant-outline"></ion-icon>
                            <span>Nutriscore &reg; <strong>74</strong></span>
                        </li>
                        <li class="meal-attribute">
                            <ion-icon class="meal-icon" name="star-outline"></ion-icon>
                            <span><strong>4.9</strong> rating(537)</span>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="meal">
                <img src="img/meals/meal-2.jpg" class="meal-img" alt="Japanese Gyozas">
                <div class="meal-content">
                    <div class="meal-tags">
                        <span class="tag tag--vegan">Vegan</span>
                        <span class="tag tag--paleo">Paleo</span>
                    </div>
                    <p class="meal-title">Avocado Salad</p>
                    <ul class="meal-attributes">
                        <li class="meal-attribute">
                            <ion-icon class="meal-icon" name="flame-outline"></ion-icon>
                            <span><strong>400</strong> calories</span>
                        </li>
                        <li class="meal-attribute">
                            <ion-icon class="meal-icon" name="restaurant-outline"></ion-icon>
                            <span>Nutriscore &reg; <strong>92</strong></span>
                        </li>
                        <li class="meal-attribute">
                            <ion-icon class="meal-icon" name="star-outline"></ion-icon>
                            <span><strong>4.8</strong> rating(441)</span>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="diets">
                <h3 class="heading-tertiary">Works with any diet</h3>
                <ul class="list">
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Vegetarian</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Vegan</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Pescatarian</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Gluten-free</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Lactose-free</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Keto</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Paleo</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Low FODMAP</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Kid-friendly</span></li>
                </ul>  
            </div>
        </div>
        <div class="container all-recipes">
            <a href="#" class="link">See all recipes &rarr;</a>
        </div>
    </section>
    <section class="section-testimonials" id="testimonials">
        <div class="testimonials-container">
            <span class="subheading">Testimonials</span>
            <h2 class="heading-secondary">Once you try it, you can't go back</h2>
            <div class="testimonials">
              <figure class="testimonial">
                <img
                  class="testimonial-img"
                  alt="Photo of customer Dave Bryson"
                  src="img/customers/dave.jpg"
                />
                <blockquote class="testimonial-text">
                  Inexpensive, healthy and great-tasting meals, without even
                  having to order manually! It feels truly magical.
                </blockquote>
                <p class="testimonial-name">&mdash; Dave Bryson</p>
              </figure>
              <figure class="testimonial">
                <img
                  class="testimonial-img"
                  alt="Photo of customer Ben Hadley"
                  src="img/customers/ben.jpg"
                />
                <blockquote class="testimonial-text">
                  The AI algorithm is crazy good, it chooses the right meals for
                  me every time. It's amazing not to worry about food anymore!
                </blockquote>
                <p class="testimonial-name">&mdash; Ben Hadley</p>
              </figure>
              <figure class="testimonial">
                <img
                  class="testimonial-img"
                  alt="Photo of customer Steve Miller"
                  src="img/customers/steve.jpg"
                />
                <blockquote class="testimonial-text">
                  Omnifood is a life saver! I just started a company, so there's
                  no time for cooking. I couldn't live without my daily meals now!
                </blockquote>
                <p class="testimonial-name">&mdash; Steve Miller</p>
              </figure>
  
              <figure class="testimonial">
                <img
                  class="testimonial-img"
                  alt="Photo of customer Hannah Smith"
                  src="img/customers/hannah.jpg"
                />
                <blockquote class="testimonial-text">
                  I got Omnifood for the whole family, and it frees up so much
                  time! Plus, everything is organic and vegan and without plastic.
                </blockquote>
                <p class="testimonial-name">&mdash; Hannah Smith</p>
              </figure>
            </div>
        </div>
        <div class="gallery">
            <figure class="gallery-item">
                <img src="img/gallery/gallery-1.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-2.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-3.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-4.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-5.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-6.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-7.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-8.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-9.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-10.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-11.jpg">
            </figure>
            <figure class="gallery-item">
                <img src="img/gallery/gallery-12.jpg">
            </figure>
        </div>
    </section>
    <section class="section-pricing" id="pricing">
        <div class="container">
            <span class="subheading">Pricing</span>
            <h2 class="heading-secondary">Eating well without breaking the bank</h2>
        </div>
        <div class="pricing-container container grid grid--2-cols margin-bottom-md">
            <div class="pricing-plan pricing-plan--starter">
                <header class="plan-header">
                    <p class="plan-name">Starter</p>
                    <p class="plan-price"><span>$</span>399</p>
                    <p class="plan-text">per month.That's just $13 per meal!</p>
                </header>
                <ul class="list">
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>1 meal per day</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Order from 11am to 9pm</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Delivery is free</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="close-outline"></ion-icon><span></span></li>
                </ul> 
                <div class="plan-sign-up">
                    <a href="#" class="btn btn--full">Start eating well</a> 
                </div>
            </div>
            <div class="pricing-plan pricing-plan--complete">
                <header class="plan-header">
                    <p class="plan-name">Complete</p>
                    <p class="plan-price"><span>$</span>649</p>
                    <p class="plan-text">per month.That's just $11 per meal!</p>
                </header>
                <ul class="list">
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span> <strong>2 meals</strong> per day</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Order <strong>24/7</strong></span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Delivery is free</span></li>
                    <li class="list-item"><ion-icon class="list-icon" name="checkmark-outline"></ion-icon><span>Get access to latest recipes</span></li>
                </ul> 
                <div class="plan-sign-up">
                    <a href="#" class="btn btn--full">Start eating well</a> 
                </div>
            </div>
        </div>
        <div class="container margin-bottom-lg">
            <aside class="plan-details">Prices include all applicable taxes. Users can cancel at any time. Both plans include the folllowing:</aside>
        </div>
        <div class="container grid grid--4-cols">
            <div class="feature">
                <ion-icon class="feature-icon" name="infinite-outline"></ion-icon>
                <p class="feature-title">Never cook again!</p>
                <p class="feature-text">Our subscriptions cover 365 days per year, even including major holidays.</p>
            </div>
            <div class="feature">
                <ion-icon class="feature-icon" name="nutrition-outline"></ion-icon>
                <p class="feature-title">Local and organic</p>
                <p class="feature-text">Our cooks only use local, fresh, and organic products to prepare your meals.</p>
            </div>
            <div class="feature">
                <ion-icon class="feature-icon" name="leaf-outline"></ion-icon>
                <p class="feature-title">No waste</p>
                <p class="feature-text">All our partners only use reusable containers to package all your meals.</p>
            </div>
            <div class="feature">
                <ion-icon class="feature-icon" name="pause-outline"></ion-icon>
                <p class="feature-title">Pause anytime</p>
                <p class="feature-text">Going on vacation? Just pause your subscription, and we refund unused days.</p>
            </div>
        </div>
    </section>
    <section class="section-cta" id="try">
        <div class="container">
            <div class="cta">
                <div class="cta-text-box">
                    <h2 class="heading-secondary">Get your first meal for free</h2>
                    <p class="cta-text">Healthy, tasty and hassle-free meals are waiting for you. Start eating well today. You can cancel or pause anytime. And the first meal is on us!</p>
                    <form class="cta-form" name="sign-up" netlify>
                        <div>
                            <label for="full-name">Full Name</label>
                            <input name="full-name" type="text" id="full-name" placeholder="John Smith" required>
                        </div>
                        <div>   
                            <label for="email">Email address</label>
                            <input name="email" type="e-mail" id="email" placeholder="abc@example.com" required>
                        </div>
                        <div>
                            <label for="select-where">Where did you hear about us?</label>
                            <select name="select-where" id="select-where" required>
                                <option value="">Please choose one option:</option>
                                <option value="friends">Friends and Family</option>
                                <option value="youtube">Youtube Video</option>
                                <option value="podcast">Podcast</option>
                                <option value="ad">Facebook ad</option>
                                <option value="others">Others</option>
                            </select>
                        </div>
                        <button class="btn btn--form">Sign up now</button>
                    </form>
                </div>
                <div class="cta-img-box" role="img" aria-level="Women enjoying food"></div>
            </div>
        </div>
    </section>
    </main>
    <footer class="footer">
        <div class="container grid grid--footer">
            <div class="logo-col">
                <a href="#" class="footer-logo">
                    <img class="logo" src="img/omnifood-logo.png">
                </a>
                <ul class="social-links">
                    <li><a class="footer-link" href="#"><ion-icon class="social-icon" name="logo-instagram"></ion-icon></a></li>
                    <li><a class="footer-link" href="#"><ion-icon class="social-icon" name="logo-facebook"></ion-icon></a></li>
                    <li><a class="footer-link" href="#"><ion-icon class="social-icon" name="logo-twitter"></ion-icon></a></li>
                </ul>
                <p class="copyright">
                    Copyright &copy; <span class="year">2027</span> by Omnifood, Inc.
                    All rights reserved.
                </p>            
            </div>
            <div class="address-col">
                <p class="footer-heading">Contact us</p>
                <address class="contacts">
                    <p class="address">623 Harrison St., 2nd Floor, San Francisco, CA 94107</p>
                    <p>
                        <a class="footer-link" href="tel:415-201-6370">415-201-6370</a> <br>
                        <a class="footer-link" href="mailto:hello@omnifood.com">hello@omnifood.com</a>
                    </p>
                </address>
            </div>
            <div class="nav-col">
                <p class="footer-heading">Account</p>
                <ul class="footer-nav">
                    <li><a class="footer-link" href="#">Create account</a></li>
                    <li><a class="footer-link" href="#">Sign in</a></li>
                    <li><a class="footer-link" href="#">iOS app</a></li>
                    <li><a class="footer-link" href="#">Android app</a></li>
                </ul>
            </div>
            <div class="nav-col">
                <p class="footer-heading">Company</p>
                <ul class="footer-nav">
                    <li><a class="footer-link" href="#">About Omnifood</a></li>
                    <li><a class="footer-link" href="#">For Business</a></li>
                    <li><a class="footer-link" href="#">Cooking partners</a></li>
                    <li><a class="footer-link" href="#">Careers</a></li>
                </ul>
            </div>
            <div class="nav-col">
                <p class="footer-heading">Resources</p>
                <ul class="footer-nav">
                    <li><a class="footer-link" href="#">Recipe directory</a></li>
                    <li><a class="footer-link" href="#">Help center</a></li>
                    <li><a class="footer-link" href="#">Privacy & terms</a></li>
                </ul>
            </div>
        </div>
    </footer>
    <script defer src="js/script.js"></script>
</body>
</html> 
/* ********************************** */
/* HEADER */
/* ********************************** */
.header{
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #fdf2e9;
    height: 9.6rem;
    padding: 0 4.8rem;
    position: relative;
}
.logo{
    height: 2.2rem;
}
/* *************** NAVIGATION ***************** */
.main-nav-list{
    list-style: none;
    display: flex;
    align-items: center;
    gap: 4.8rem;
}
.main-nav-link:link, .main-nav-link:visited{
    display: inline-block;
    text-decoration: none;
    color: #333;
    font-weight: 500;
    font-size: 1.8rem;
    transition: all 0.3s;
}
.main-nav-link:hover, .main-nav-link:active{
    color: #cf711f;
}
.main-nav-link.nav-cta:link,
.main-nav-link.nav-cta:visited{
    padding: 1.2rem 2.4rem;
    border-radius: 9px;
    color: #fff;
    background-color: #e67e22;
}
.main-nav-link.nav-cta:hover,
.main-nav-link.nav-cta:active{
    background-color: #cf711f;
}
/* ********************************** */
/* MOBILE NAVIGATION */
/* ********************************** */
.btn-mobile-nav{
    border: none;
    background: none;
    cursor: pointer;
    display: none;
}
.icon-mobile-nav{
    height: 4.8rem;
    width: 4.8rem;
    color: #333;
}
.icon-mobile-nav[name="close-outline"]{
    display: none;
}
/* ********************************** */
/* STICKY NAVIGATION */
/* ********************************** */
.sticky .header{
    position: fixed;
    top: 0;
    bottom: 0;
    height: 8rem;
    padding-top: 0;
    padding-bottom: 0;
    background-color: rgb(255, 255, 255,0.97);
    width: 100%;
    z-index: 999;
    box-shadow: 0 1.2rem 3.2rem rgba(0,0,0,0.03);
}
.sticky .section-hero{
    margin-top: 9.6rem;
}
/* ********************************** */
/* HERO SECTION */
/* ********************************** */
.section-hero{
    background-color: #fdf2e9;
    padding: 4.8rem 0 9.6rem 0;
}
.hero{ 
    max-width: 130rem;
    margin: 0 auto;
    padding: 0 3.2rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 9.6rem;
    align-items: center;
}
.hero-description{
    font-size: 2rem;
    line-height: 1.6;
    margin-bottom: 4.8rem;
}
.hero-img{
    width: 100%;
}
.delivered-meals{
    display: flex;
    align-items: center;
    gap: 1.6rem;
    margin-top: 8rem;
}
.delivered-imgs{
    display: flex;
}
.delivered-imgs img{
    height: 4.8rem;
    width: 4.8rem;
    border-radius: 50%;
    margin-right: -1.6rem;
    border: 3px solid #fdf2e9;
}
.delivered-imgs img:last-child{
    margin-right: 0rem;
}
.delivered-text{
    font-size: 1.8rem;
    font-weight: 600;
}
.delivered-text span{
    color: #cf711f;
    font-weight: 700;
}
/* ********************************** */
/* FEATURED IN SECTION */
/* ********************************** */
.section-featured{
    padding: 4.8rem 0 3.2rem 0;
}
.heading-featured-in{
    font-size: 1.4rem;
    text-transform: uppercase;
    letter-spacing: 0.75px;
    font-weight: 500;
    text-align: center;
    padding: 2rem;
    color: #767676;
}
.logos{
    display: flex;
    justify-content: space-around;
}
.logos img{
    height: 3.2rem;
    filter: brightness(0);
    opacity: 50%;
}
/* ********************************** */
/* HOW SECTION */
/* ********************************** */
.section-how{
    padding: 9.6rem 0;
}
.step-number{
    font-size: 8.6rem;
    font-weight: 600;
    color: #ddd;
    margin-bottom: 1.2rem;
}
.step-description{
    font-size: 2rem;
    line-height: 1.8;
}
.step-img-box{
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
}
.step-img-box::before, .step-img-box::after{
    content: "";
    display: block;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
}
.step-img-box::before{
    width: 60%;
    /* height: 60%; */
    /* 60% of parent width */
    padding-bottom: 60%;
    background-color: #fdf2e9;
    z-index: -3;
}
.step-img-box::after{
    width: 45%;
    padding-bottom: 45%;
    background-color: #fae5d3;
    z-index: -1;
}
.step-img{
    width: 35%;
}
/* ********************************** */
/* MEALS SECTION */
/* ********************************** */
.section-meals{
    padding: 9.6rem 0;
}
.meal{
    box-shadow: 0 2.4rem 4.8rem rgba(0,0,0,0.1);
    border-radius: 11px;
    overflow: hidden;
    transition: all 0.5s;
}
.meal:hover{
    transform: translateY(-1.2rem);
    box-shadow: 0 3.2rem 6.4rem rgba(0,0,0,0.1);
}
.meal-content{
    padding: 4.8rem;
    padding-top: 3.2rem;
}
.meal-tags{
    margin-bottom: 1.2rem;
    display: flex;
    gap: 0.4rem;
}
.tag{
    display: inline-block;
    padding: 0.4rem 0.8rem;
    font-size: 1.2;
    text-transform: uppercase;
    color: #333;
    border-radius: 100px;
    font-weight: 600;
}
.tag--veg{
    background-color: #51cf66;
}
.tag--vegan{
    background-color: #94d82d;
}
.tag--paleo{
    background-color: #ffd43b;
}
.meal-title{
    font-size: 2rem;
    color: #333;
    font-weight: 600;
    margin-bottom: 3.2rem;
}
.meal-attributes{
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 2rem;
}
.meal-attribute{
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 1.6rem;
}
.meal-icon{
    height: 2.4rem;
    width: 2.4rem;
    color: #e67e22;
}
.meal-img{
    width: 100%;
}
.all-recipes{
    text-align: center;
    font-size: 1.8rem;
}
/* ********************************** */
/* TESTIMONIALS SECTION */
/* ********************************** */
.section-testimonials{
    background-color: #fdf2e9;
    display: grid;
    grid-template-columns: 55fr 45fr;
    align-items: center;
}
.testimonials-container{
    padding: 9.6rem;
}
.testimonials{
    display: grid;
    grid-template-columns: 1fr 1fr;
    row-gap: 4.8rem;
    column-gap: 8rem;
}
.testimonial-img{
    width: 6.4rem;
    border-radius: 50%;
    margin-bottom: 1.2rem;
}
.testimonial-text{
    font-size: 1.8rem;
    line-height: 1.8;
    margin-bottom: 1.6rem;
}
.testimonial-name{
    font-size: 1.6rem;
    color: #6f6f6f;
}
.gallery{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 1.6rem;
    padding: 1.6rem;
}
.gallery-item{
    overflow: hidden;
}
.gallery-item img{
    display: block;
    width: 100%;
    transition: all 0.5s;
}
.gallery-item img:hover{
    transform: scale(1.1);
}
/* ********************************** */
/* PRICING SECTION */
/* ********************************** */
.section-pricing{
    padding: 9.6rem 0;
}
.pricing-plan{
    border-radius: 11px;
    width: 75%;
    transition: all 0.5s;
    box-shadow: 0 2.4rem 4.8rem rgba(0,0,0,0.1);
}
.pricing-plan:hover{
    transform: scale(1.05);
    box-shadow: 0 3.2rem 6.4rem rgba(0,0,0,0.1);
}
.pricing-plan--starter{
    justify-self: end;
    border: 2px solid #fdf2e9;
    padding: 4.6rem;
}
.pricing-plan--complete{
    background-color: #fdf2e9;
    padding: 4.6rem;
    position: relative;
    overflow: hidden;
}
.pricing-plan--complete::after{
    content: "Best value";
    position: absolute;
    top: 6%;
    right: -18%;
    text-transform: uppercase;
    font-size: 1.4rem;
    font-weight: 700;
    background-color: #ffd43b;
    padding: .8rem 8rem;
    transform: rotate(45deg);
}
.plan-header{
    text-align: center;
    margin-bottom: 4.8rem;
}
.plan-name{
    color: #cf711f;
    font-weight: 600;
    font-size: 2rem;
    text-transform: uppercase;
    letter-spacing: 0.75;
    margin-bottom: 3.2rem;
}
.plan-price{
    font-size: 6.2rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 1.6rem;
}
.plan-price span{
    font-size: 3rem;
    font-weight: 500;
    margin-right: 0.8rem;
}
.plan-text{
    font-size: 1.6rem;
    line-height: 1.6;
    color: #6f6f6f;
}
.plan-sign-up{
    text-align: center;
    margin-top: 4.8rem;
}
.plan-details{
    font-size: 1.6rem;
    line-height: 1.6rem;
    text-align: center;
}
.feature{
    display: flex;
    flex-direction: column;
    align-items: center;
}
.feature-icon{
    color: #e67e22;
    height: 3.2rem;
    width: 3.2rem;
    background-color: #fdf2e9;
    padding: 1.6rem;
    border-radius: 50%;
    margin-bottom: 3.2rem;
}
.feature-title{
    font-size: 2.5rem;
    color: #333;
    font-weight: 700;
    margin-bottom: 1.6rem;
}
.feature-text{
    font-size: 1.4rem;
    line-height: 1.4rem;
    align-self: stretch;
}
/* ********************************** */
/* CTA SECTION */
/* ********************************** */
.section-cta{
    padding: 4.8rem 0 9.6rem;
    padding-top: 0;
}
.cta{
    display: grid;
    grid-template-columns: 2fr 1fr;
    background-color: #e67e22;
    box-shadow: 0 2rem 4rem rgba(0,0,0,0.2);
    border-radius: 11px;
    background-image: linear-gradient(to right bottom,#eb984e,#e67e22);
    overflow: hidden;
    transition: all 0.5s;
}
.cta:hover{
    transform: scale(1.025);
    box-shadow: 0 3.2rem 6.4rem rgba(0,0,0,0.25);
}
.cta-text-box{
    padding: 4.8rem 6.4rem 6.4rem 6.4rem;
    color: #45260a;
}
.cta .heading-secondary{
    /* color: #45260a; */
    color: inherit;
    margin-bottom: 3.2rem;
}
.cta-text{
    font-size: 1.8rem;
    line-height: 1.8rem;
    margin-bottom: 4.8rem;
}
.cta-img-box{
    background-image: linear-gradient(to right bottom,rgba(235, 150, 76, 0.35),rgba(231, 126, 35, 0.35)), url("../img/eating.jpg");
    background-size: cover;
    background-position: center;
}
.cta-form{
    display: grid;
    grid-template-columns: 1fr 1fr;
    column-gap: 3.2rem;
    row-gap: 2.4rem;
}
.cta-form label{
    display: block;
    font-size: 1.6rem;
    font-weight: 500;
    margin-bottom: 1.2rem;
}
.cta-form input, .cta-form select{
    width: 100%;
    padding: 1.2rem;
    font-size: 1.8rem;
    font-family: inherit;
    color: inherit;
    border: none;
    background-color: #fdf2e9;
    border-radius: 9px;
    box-shadow: 0 1px 2px rgba(0,0,0,0.5);
}
.cta-form input::placeholder{
    color: #aaa;
}
/* .cta *:focus{
    outline: none;
    outline: 4px dotted #e67e22; 
    outline-offset: 8px; 
    box-shadow: 0 0 0 0.8rem rgba(253, 242, 233, 0.5);
} */
/* ********************************** */
/* FOOTER */
/* ********************************** */
.footer{
    padding: 9.6rem 0 12.8rem 0;
    border-top: 1px solid #eee;
}
.grid--footer{
    grid-template-columns: 1.5fr 1.5fr 1fr 1fr 1fr;
}
.logo-col{
    display: flex;
    flex-direction: column;
}
.footer-logo{
    display: block;
    margin-bottom: 3.2rem;
}
.social-links{
    list-style: none;
    display: flex;
    gap: 2.4rem;
}
.social-icon{
    height: 2.4rem;
    width: 2.4rem;
}
.copyright{
    font-size: 1.4rem;
    line-height: 1.6;
    color: #767676;
    margin-top: auto;
}
.footer-heading{
    font-size: 1.8rem;
    font-weight: 500;
    margin-bottom: 4rem;
}
.contacts{
    font-style: normal;
    font-size: 1.6rem;
    line-height: 1.6rem;
}
.address{
    margin-bottom: 2.4rem;
}
.footer-nav{
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 2.4rem;
}
.footer-link:link,
.footer-link:visited{
    text-decoration: none;
    font-size: 1.6rem;
    color: #767676;
    transition: all 0.5s;
}
.footer-link:hover,
.footer-link:active{
    color: #555;
}
/*
--- 01 TYPOGRAPHY SYSTEM
- Font sizes (px)
10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98
- Font weights
Default: 400
Medium: 500
Semi-bold: 600
Bold: 700
- Line heights
Default: 1
Small: 1.05
Medium: 1.2
Paragraph default: 1.6
- Letter spacing
-0.5px
0.75px
--- 02 COLORS
- Primary: #e67e22
- Tints:
#fdf2e9
#fae5d3
#eb984e
- Shades: 
#cf711f
#45260a
- Accents:
- Greys
#888
#767676 (lightest grey allowed on #fff)
#6f6f6f (lightest grey allowed on #fdf2e9)
#555
#333
--- 05 SHADOWS
0 2.4rem 4.8rem rgba(0, 0, 0, 0.075);
--- 06 BORDER-RADIUS
Default: 9px
Medium: 11px
--- 07 WHITESPACE
- Spacing system (px)
2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128
*/
*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}
html{
    font-size: 62.5%;
    overflow-x: hidden;
    scroll-behavior: smooth;

}
body{
    font-family: "Rubik",sans-serif;
    line-height: 1;
    font-weight: 400;
    color: #555;
    /* Only works if there is nothing absolutely positioned in relation to body */
    overflow-x: hidden;
}
/* ********************************** */
/* GENERAL COMPONENTS */
/* ********************************** */
.heading-primary, .heading-secondary, .heading-tertiary{
    font-weight: 700;
    color: #333;
    /* color: #45260a; */
    letter-spacing: -0.5px;
}
.heading-primary{
    font-size: 5.2rem;
    line-height: 1.05;
    margin-bottom: 3.2rem;
}
.heading-secondary{
    font-size: 4.4rem;
    line-height: 1.2;
    margin-bottom: 9.6rem;
}
.heading-tertiary{
    font-size: 3rem;
    line-height: 1.2;
    margin-bottom: 3.2rem;
}
.subheading{
    display: block;
    font-size: 1.6rem;
    font-weight: 500;
    color: #cf711f;
    text-transform: uppercase;
    margin-bottom: 2rem;
    letter-spacing: 0.75px;
    text-align: center;
}
.btn,.btn:link, .btn:visited{
    display: inline-block;
    font-size: 2rem;
    padding: 1.6rem 3.2rem;
    border-radius: 9px;
    text-decoration: none;
    font-weight: 600;
    /* Only req for .btn */
    border: none;
    cursor: pointer;
    font-family: inherit;
    /* Put transition on original state */
    transition: all 0.4s;
}
.btn--full:link, .btn--full:visited{
    background-color: #e67e22;
    color: #fff;
}
.btn--full:hover, .btn--full:active{
    background-color: #cf711f;
    color: #fff;
}
.btn--outline:link, .btn--outline:visited{
    background-color: #fff;
    color: #555;
}
.btn--outline:hover, .btn--outline:active{
    background-color: #fdf2e9;
    color: #555;
    /* border: 3px solid #fff; */
    /* Trick to add border inside */
    box-shadow: inset 0 0 0 3px #fff;
}
.btn--form{
    background-color: #45260a;
    color: #fdf2e9;
    align-self: end;
    padding: 1.2rem;
}
.btn--form:hover{
    background-color: #fff;
    color: #555;
}
.container{
    max-width: 120rem;
    padding: 0 3.2rem;
    margin: 0 auto;
}
.grid{
    display: grid;
    column-gap: 6.4rem;
    row-gap: 9.6rem;
}
.grid--2-cols{
    grid-template-columns: repeat(2,1fr);
}
.grid--3-cols{
    grid-template-columns: repeat(3,1fr);
}
.grid--4-cols{
    grid-template-columns: repeat(4,1fr);
}
.grid--5-cols{
    grid-template-columns: repeat(5,1fr);
}  
.grid--center-v{
    align-items: center;
}
.margin-right-sm{
    margin-right: 1.6rem;
}
.margin-bottom-md{
    margin-bottom: 4.8rem;
}
.margin-bottom-lg{
    margin-bottom: 9.6rem;
}
strong{
    font-weight: 500;
}
.link:link, .link:visited{
    color: #e67e22;
    display: inline-block;
    text-decoration: none;
    border-bottom: 1px solid currentColor;
    padding-bottom: 2px;
    transition: all 0.3s;
}
.link:hover, .link:active{
    color: #cf711f;
    border-bottom: 1px solid transparent;
}
.list{
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 1.6rem;
}
.list-item{
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 1.6rem;
    line-height: 1.2;
}
.list-icon{
    width: 3rem;
    height: 3rem;
    color: #e67e22;
}
*:focus{
    outline: none;
    /* outline: 4px dotted #e67e22; */
    /* outline-offset: 8px; */
    /* box-shadow: 0 0 0 0.8rem rgb(230, 126, 34,0.5); */
}
/* rem and em do NOT depend  on html font-size in media queries! Instead, 1rem = 1em = 16px */
/* ********************************** */
/* BELOW 1350px (Smaller desktops) */
/* ********************************** */
@media(max-width:84em){
    .hero{
        max-width: 120rem;
    }
    .heading-primary{
        font-size: 4.4rem;
    }
    /* .gallery{
        display: grid;
        grid-template-columns: 1fr 1fr;
    } 
    .gallery-item img{
        width: 80%;
    } */
}
/* ********************************** */
/* BELOW 1200px (Landscape Tablets) */
/* ********************************** */
@media(max-width:75em){
    html{
        /* 9px */
        font-size: 56.25%;
    }
    .grid{
        column-gap: 4.8rem;
        row-gap: 6.4;
    }
    .heading-secondary{
        font-size: 3.6rem;
    }
    .heading-tertiary{
        font-size: 2.4rem;
    }
    .header{
        padding: 0 3.2rem;
    }
    .main-nav-list{
        gap: 4.8rem;
    }
    .hero{
        gap: 4.8rem;
    }
    .testimonials-container{
        padding: 8.6rem 3.2rem;
    }
    .testimonials{
    display: grid;
    grid-template-columns: 1fr 1fr;
    row-gap: 4.8rem;
    column-gap: 5.2rem;
}
}
/* ********************************** */
/* BELOW 944px (Tablets) */
/* ********************************** */
@media(max-width:59em){
    html{
        /* 8px */
        font-size: 50%;
    }
    .hero{
        grid-template-columns: 1fr;
        padding: 0 8rem;
        gap: 6.4rem;
    }
    .hero-text-box{
        text-align: center;
    }
    .hero-img{
        width: 60%;
    }
    .hero-img-box{
        text-align: center;
    }
    .delivered-meals{
        justify-content: center;
        margin-top: 3.2rem;
    }
    .logos img{
        height: 2.4rem;
    }
    .step-number{
        font-size: 7.4rem;
    }
    .meal-content{
        padding: 3.2rem;
        padding-top: 2.4rem;
    }
    .section-testimonials{
        grid-template-columns: 1fr;
        align-items: center;
    }
    .gallery{
        display: grid;
        grid-template-columns: repeat(6,1fr);
    } 
    .cta{
        grid-template-columns: 3fr 2fr;
    }
    .cta-form{
        grid-template-columns: 1fr;
    }
    .btn--form{
        margin-top: 1.2rem;
    }
    /* ********************************** */
    /* (MOBILE NAVIGATION) */
    /* ********************************** */
    .btn-mobile-nav{
        display: block;
        z-index: 9999;
    }
    .main-nav {
        background-color: rgba(255, 255, 255, 0.9);
        -webkit-backdrop-filter: blur(5px);
        backdrop-filter: blur(10px);
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        transform: translateX(100%);
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.5s ease-in;
        /* Hide navigation */
        /* Allows NO transitions at all */
        /* display: none; */
        /* 1) Hide it visually */
        opacity: 0;
        /* 2) Make it unaccessible to mouse and keyboard */
        pointer-events: none;
        /* 3) Hide it from screen readers */
        visibility: hidden;
      }
    .nav-open .main-nav{
        opacity: 1;
        pointer-events: auto;
        visibility: visible;
        transform: translateX(0);
    }
    .nav-open .icon-mobile-nav[name="close-outline"]{
        display: block;
    }
    .nav-open .icon-mobile-nav[name="menu-outline"]{
        display: none;
    }
    .main-nav-list{
        flex-direction: column;
        gap: 4.8rem;
    }
    .main-nav-link:link, .main-nav-link:visited{
        font-size: 3rem;
    }
}
/* ********************************** */
/* BELOW 704px (Smaller - Tablets) */
/* ********************************** */
@media(max-width:44em){
    .grid--3-cols{
        grid-template-columns: repeat(2,1fr);
    }
    .grid--4-cols{
        grid-template-columns: repeat(2,1fr);
    }
    .diets{
        grid-column: 1 / -1;
        justify-self: center;
    }
    /* */
    .diets .heading-tertiary{
        text-align: center;
    }
    .list{
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
    }
    .heading-secondary{
        margin-bottom: 4.8rem;
    }
    .pricing-plan{
        width: 100%;
    }
    .pricing-plan .list{
        display: flex;
    }
   .grid--footer{
        grid-template-columns: repeat(6,1fr);
    }
    .nav-col{
        grid-row: 1;
        grid-column: span 2;
        margin-bottom: 3.2rem;
    }
    .logo-col, .address-col{
        grid-column: span 3;
    }
}
/* ********************************** */
/* BELOW 560px (Phones) */
/* ********************************** */
@media(max-width:35em){
    .grid{
        row-gap: 4.8rem;
    }
    .grid--2-cols, .grid--3-cols, .grid--4-cols{
        grid-template-columns: 1fr;
    }
    .btn,.btn:link, .btn:visited{
        padding: 2.4rem 1.6rem;
    }
    .section-hero{
        padding: 2.4rem 0 6.4rem 0;
    }
    .hero{
        padding: 0 3.2rem;
    }
    .hero-img{
        width: 80%;
    }
    .logos img{
        height: 1.3rem;
    }
    .step-img-box:nth-child(2){
        grid-row: 1;
    }

    .step-img-box:nth-child(6){
        grid-row: 5;
    }
    .step-img-box{
        transform: translateY(2.4rem);
    }
    .testimonials{
        grid-template-columns: 1fr;
    }
    .gallery{
        grid-template-columns: repeat(4,1fr);
        gap: 1.2rem;
    }
    .cta{
        grid-template-columns: 1fr;
    }
    .cta-text-box{
        padding: 3.2rem;
    }
    .cta-img-box{
        height: 32rem;
        grid-row: 1;
    }
}
/* ********************************** */
/* BELOW 400px (Small Phones) */
/* ********************************** */
@media(max-width:25em){
    .meal{
        width: 80%;
        margin: 0 auto;
    }
    .list{
        grid-template-columns: 1fr 1fr;
    }
}
console.log("Hello world!");
const myName = "Jonas Schmedtmann";
const h1 = document.querySelector(".heading-primary");
console.log(myName);
console.log(h1);
// h1.addEventListener("click", function () {
//   h1.textContent = myName;
//   h1.style.backgroundColor = "red";
//   h1.style.padding = "5rem";
// });
///////////////////////////////////////////////////////////
// Set current year
const yearEl = document.querySelector(".year");
const currentYear = new Date().getFullYear();
yearEl.textContent = currentYear;
///////////////////////////////////////////////////////////
// Make mobile navigation work
const btnNavEl = document.querySelector(".btn-mobile-nav");
const headerEl = document.querySelector(".header");
btnNavEl.addEventListener("click", function () {
  headerEl.classList.toggle("nav-open");
});
///////////////////////////////////////////////////////////
// Smooth scrolling animation
const allLinks = document.querySelectorAll("a:link");
allLinks.forEach(function (link) {
  link.addEventListener("click", function (e) {
    e.preventDefault();
    const href = link.getAttribute("href");
    // Scroll back to top
    if (href === "#")
      window.scrollTo({
        top: 0,
        behavior: "smooth",
      });
    // Scroll to other links
    if (href !== "#" && href.startsWith("#")) {
      const sectionEl = document.querySelector(href);
      sectionEl.scrollIntoView({ behavior: "smooth" });
    }
    // Close mobile naviagtion
    if (link.classList.contains("main-nav-link"))
      headerEl.classList.toggle("nav-open");
  });
});
// ///////////////////////////////////////////////////////////
// // Sticky navigation
const sectionHeroEl = document.querySelector(".section-hero");
const obs = new IntersectionObserver(
  function (entries) {
    const ent = entries[0];
    console.log(ent);
    if (ent.isIntersecting === false) {
      document.body.classList.add("sticky");
    }
    if (ent.isIntersecting === true) {
      document.body.classList.remove("sticky");
    }
  },
  {
    // In the viewport
    root: null,
    threshold: 0,
    rootMargin: "-80px",
  }
);
obs.observe(sectionHeroEl);
// ///////////////////////////////////////////////////////////
// // Fixing flexbox gap property missing in some Safari versions
function checkFlexGap() {
  var flex = document.createElement("div");
  flex.style.display = "flex";
  flex.style.flexDirection = "column";
  flex.style.rowGap = "1px";
  flex.appendChild(document.createElement("div"));
  flex.appendChild(document.createElement("div"));
  document.body.appendChild(flex);
  var isSupported = flex.scrollHeight === 1;
  flex.parentNode.removeChild(flex);
  console.log(isSupported);
  if (!isSupported) document.body.classList.add("no-flexbox-gap");
}
checkFlexGap();
// https://unpkg.com/smoothscroll-polyfill@0.4.4/dist/smoothscroll.min.js

/*
.no-flexbox-gap .main-nav-list li:not(:last-child) {
  margin-right: 4.8rem;
}
.no-flexbox-gap .list-item:not(:last-child) {
  margin-bottom: 1.6rem;
}
.no-flexbox-gap .list-icon:not(:last-child) {
  margin-right: 1.6rem;
}
.no-flexbox-gap .delivered-faces {
  margin-right: 1.6rem;
}
.no-flexbox-gap .meal-attribute:not(:last-child) {
  margin-bottom: 2rem;
}
.no-flexbox-gap .meal-icon {
  margin-right: 1.6rem;
}
.no-flexbox-gap .footer-row div:not(:last-child) {
  margin-right: 6.4rem;
}
.no-flexbox-gap .social-links li:not(:last-child) {
  margin-right: 2.4rem;
}
.no-flexbox-gap .footer-nav li:not(:last-child) {
  margin-bottom: 2.4rem;
}
@media (max-width: 75em) {
  .no-flexbox-gap .main-nav-list li:not(:last-child) {
    margin-right: 3.2rem;
  }
}
@media (max-width: 59em) {
  .no-flexbox-gap .main-nav-list li:not(:last-child) {
    margin-right: 0;
    margin-bottom: 4.8rem;
  }
}
*/
{
  "icons": [
    { "src": "img/favicon-192.png", "type": "image/png", "sizes": "192x192" },
    { "src": "img/favicon-512.png", "type": "image/png", "sizes": "512x512" }
  ]
}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Monster Killer</title>
    <link rel="stylesheet" href="assets/styles/app.css" />
    <script src="assets/scripts/vendor.js" defer></script>
    <script src="assets/scripts/app.js" defer></script>
  </head>
  <body>
    <section id="health-levels">
      <h2>MONSTER HEALTH</h2>
      <progress id="monster-health" max="100" value="100">100%</progress>
      <h2>PLAYER HEALTH<span id="bonus-life">1</span></h2>
      <progress id="player-health" max="100" value="100">100%</progress>
    </section>
    <section id="controls">
      <button id="attack-btn">ATTACK</button>
      <button id="strong-attack-btn">STRONG ATTACK</button>
      <button id="heal-btn">HEAL</button>
      <button id="log-btn">SHOW LOG</button>
    </section>
  </body>
</html>
html {
  font-family: sans-serif;
}
body {
  background: #2c2c2c;
}
h2 {
  font-size: 1.25rem;
  margin: 1rem 0.5rem;
}
progress {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 80%;
  height: 2rem;
  color: #ff0062;
  border: 1px solid #a927f5;
}
progress[value]::-webkit-progress-bar,
progress[value] {
  background-color: #eee;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.25) inset;
}
progress[value]::-webkit-progress-value {
  background-color: #a927f5;
  transition: all 0.2s ease-out;
}
progress[value]::-moz-progress-bar {
  background-color: #a927f5;
  transition: all 0.2s ease-out;
}
button {
  font: inherit;
  background: #ff0062;
  border: 1px solid #ff0062;
  color: white;
  padding: 1rem 2rem;
  border-radius: 6px;
  cursor: pointer;
  margin: 0.5rem;
}
button:focus {
  outline: none;
}
button:hover,
button:active {
  background: #a927f5;
  border-color: #a927f5;
}
#health-levels,
#controls {
  margin: 2rem auto;
  width: 30rem;
  text-align: center;
  border-radius: 10px;
  padding: 1rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.25);
  background: white;
}
#controls {
  display: flex;
  flex-direction: column;
}
#bonus-life {
  font-weight: bold;
  color: white;
  background: #ff0062;
  border: 1px solid #ff0062;
  padding: 0.15rem 0.5rem;
  border-radius: 10px;
  text-align: center;
  margin: 0 0.5rem;
}
const monsterHealthBar = document.getElementById('monster-health');
const playerHealthBar = document.getElementById('player-health');
const bonusLifeEl = document.getElementById('bonus-life');
const attackBtn = document.getElementById('attack-btn');
const strongAttackBtn = document.getElementById('strong-attack-btn');
const healBtn = document.getElementById('heal-btn');
const logBtn = document.getElementById('log-btn');
function adjustHealthBars(maxLife) {
  monsterHealthBar.max = maxLife;
  monsterHealthBar.value = maxLife;
  playerHealthBar.max = maxLife;
  playerHealthBar.value = maxLife;
}
function dealMonsterDamage(damage) {
  const dealtDamage = Math.random() * damage;
  monsterHealthBar.value = +monsterHealthBar.value - dealtDamage;
  return dealtDamage;
}
function dealPlayerDamage(damage) {
  const dealtDamage = Math.random() * damage;
  playerHealthBar.value = +playerHealthBar.value - dealtDamage;
  return dealtDamage;
}
function increasePlayerHealth(healValue) {
  playerHealthBar.value = +playerHealthBar.value + healValue;
}
function resetGame(value) {
  playerHealthBar.value = value;
  monsterHealthBar.value = value;
}
function removeBonusLife() {
  bonusLifeEl.parentNode.removeChild(bonusLifeEl);
}
function setPlayerHealth(health) {
  playerHealthBar.value = health;
}
const ATTACK_VALUE = 10;
const MONSTER_ATTACK_VALUE = 14;
const STRONG_ATTACK_VALUE = 17;
const HEAL_VALUE = 20;
const LOG_EVENT_PLAYER_ATTACK = 'PLAYER_ATTACK';
const LOG_EVENT_PLAYER_STRONG_ATTACK = 'PLAYER_STRONG_ATTACK';
const LOG_EVENT_MONSTER_ATTACK = 'MONSTER_ATTACK';
const LOG_EVENT_PLAYER_HEAL = 'PLAYER_HEAL';
const LOG_EVENT_GAME_OVER = 'GAME_OVER';
const enteredValue = prompt("Maximum life for you and the monster : ", "100");
let chosenMaxLife = parseInt(enteredValue);
let battleLog = [];
if(isNaN(chosenMaxLife) || chosenMaxLife<=0) {
    chosenMaxLife = 100;
}
let currentMonsterHealth = chosenMaxLife;
let currentPlayerHealth = chosenMaxLife;
let hasBonusLife = true;
adjustHealthBars(chosenMaxLife);
function writeToLog(ev, val, monsterHealth, playerHealth) {
    let logEntry; 
    if(ev === LOG_EVENT_PLAYER_ATTACK){
        logEntry = {
            event : ev,
            value : val,
            target : 'MONSTER',
            finalMonsterHealth : monsterHealth,
            finalPlayerHealth : playerHealth
        };
    } else if(ev === LOG_EVENT_PLAYER_STRONG_ATTACK){
        logEntry = {
            event : ev,
            value : val,
            target : 'MONSTER',
            finalMonsterHealth : monsterHealth,
            finalPlayerHealth : playerHealth
        };
    } else if(ev === LOG_EVENT_MONSTER_ATTACK){
        logEntry = {
            event : ev,
            value : val,
            target : 'PLAYER',
            finalMonsterHealth : monsterHealth,
            finalPlayerHealth : playerHealth
        };
    } else if(ev = LOG_EVENT_PLAYER_HEAL){
        logEntry = {
            event : ev,
            value : val,
            target : 'PLAYER',
            finalMonsterHealth : monsterHealth,
            finalPlayerHealth : playerHealth
        };
    } else if(ev === LOG_EVENT_GAME_OVER){
        logEntry = {
            event : ev,
            value : val,
            finalMonsterHealth : monsterHealth,
            finalPlayerHealth : playerHealth
        };
    }
    battleLog.push(logEntry);
}
function reset (){
    currentMonsterHealth = chosenMaxLife;
    currentPlayerHealth = chosenMaxLife;
    resetGame(chosenMaxLife);
}
function endRound(){
    const initialPlayerHealth = currentPlayerHealth;
    const playerDamage = dealPlayerDamage(MONSTER_ATTACK_VALUE);
    currentPlayerHealth -= playerDamage;
    writeToLog(LOG_EVENT_MONSTER_ATTACK,playerDamage, currentMonsterHealth, currentPlayerHealth);
    if(currentPlayerHealth <= 0 && hasBonusLife) {
        hasBonusLife = false;
        removeBonusLife();
        currentPlayerHealth = initialPlayerHealth;
        alert('You would be dead but the bonus life saved you!');
        setPlayerHealth(initialPlayerHealth);
    }
    if(currentMonsterHealth <= 0 && currentPlayerHealth > 0){
        alert('You won!');
        writeToLog(LOG_EVENT_GAME_OVER, 'PLAYER WON',currentMonsterHealth,currentPlayerHealth);
        reset();
    } else if(currentPlayerHealth <= 0 && currentMonsterHealth > 0){
        alert('You lost!');
        writeToLog(LOG_EVENT_GAME_OVER, 'MONSTER WON',currentMonsterHealth,currentPlayerHealth);
        reset();
    } else if(currentPlayerHealth <= 0 && currentMonsterHealth <= 0){
        alert('You have a draw');
        writeToLog(LOG_EVENT_GAME_OVER, 'DRAW',currentMonsterHealth,currentPlayerHealth);
        reset();
    }
}
function attackMonster(mode) {
    let maxDamage;
    let logEvent;
    if(mode === 'ATTACK'){
        maxDamage = ATTACK_VALUE;
        logEvent = LOG_EVENT_PLAYER_ATTACK;
    } else if(mode === 'STRONG_ATTACK'){
        maxDamage = STRONG_ATTACK_VALUE;
        logEvent = LOG_EVENT_PLAYER_STRONG_ATTACK;
    }                                   
    const damage = dealMonsterDamage(maxDamage);
    currentMonsterHealth -= damage;
    writeToLog(logEvent,damage,currentMonsterHealth,currentPlayerHealth);
    endRound();
}
function attackHandler() {
    attackMonster('ATTACK');
}
function strongAttackHandler() {
    attackMonster('STRONG_ATTACK');
}
function healPlayerHandler() {
    let healValue;
    if(currentPlayerHealth >= chosenMaxLife - HEAL_VALUE){
        alert("You can't heal to more than your max initial health.");
        healValue = chosenMaxLife - currentPlayerHealth;
    } else {
        healValue = HEAL_VALUE;
    }
    increasePlayerHealth(healValue);
    currentPlayerHealth += healValue;
    writeToLog(LOG_EVENT_PLAYER_HEAL,healValue,currentMonsterHealth,currentPlayerHealth);
    endRound();
}
function printLogHandler(){
    // for(let i=0;i<battleLog.length;i++) {
    //     console.log(battleLog[i]);
    // }
    let i=0;
    for(const logEntry of battleLog) {
        console.log(`#${i}`);
        i++;
        for(const key in logEntry) {
            console.log(key + ' : ' + logEntry[key]);
        }
    }
}
attackBtn.addEventListener('click',attackHandler);
strongAttackBtn.addEventListener('click', strongAttackHandler);
healBtn.addEventListener('click',healPlayerHandler);
logBtn.addEventListener('click',printLogHandler);
public class L1_Fundamentals {
    public static void main(String[] args) {
        System.out.println(5|9);
        System.out.println(5&9);
        // 1's complement
        System.out.println(~6);
        // 2's complement
        System.out.println(~6+1);
    }
}
// package M45_Bit_Manupilation;
import  java.util.Scanner;
public class L2_LeftShift_RightShift {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        /*
        int x = 91;
        // Right shift
        System.out.println(x>>2);
        // Left shift 
        System.out.println(x<<2);
        */
// Ques-1-) Find 2 is to power n.

        /*int n = sc.nextInt();
        System.out.println(1<<n);*/
// Ques-2-) Swap 2 number
        int a =10, b =15;
        a = a^b;
        b = a^b;
        a = a^b;
        System.out.println(a+" "+b);
    }
}
// package M45_Bit_Manupilation;
public class L3_KthBitSet {
    public static void main(String[] args) {     
// Ques-3-) GFG    Check if Kth Bit Set or not.
/*
class CheckBit {
    // Function to check if Kth bit is set or not.
    static boolean checkKthBit(int n, int k) {
        // Your code here
        int mask = 1<<k;
        if((n & mask)==0) return false;
        else return true;
    }
}
*/
    }
}
import java.util.Arrays;
public class L4_SingleNumber {  
// Ques-4-) Leetcode 136(Easy) Single number
// METHOD-1 BRUTE FORSE AND VERY VERY BAD
/*class Solution {
    public int singleNumber(int[] nums) {
        for(int i=0;i<nums.length;i++){
            boolean flag=false;
            for(int j=0;j<nums.length;j++){
                if(i==j) continue;
                if(nums[i]==nums[j]){
                    flag=true;
                    break;
                }
            }
            if(flag==false) return nums[i];
        }
        return 324;
    }
}
*/
// METHOD-2 SORTING
/*class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        int i=0;
        while(i<nums.length-1){
            if(nums[i]!=nums[i+1]) return nums[i];
            else i += 2;
        }
        return nums[nums.length-1];
    }
}*/
// METHOD-3 HASHMAP
/*class Solution {
    public int singleNumber(int[] nums) {
        Map<Integer,Integer> map = new HashMap<>();
        for(int ele:nums){
            if(map.containsKey(ele)) map.put(ele,2);
            else map.put(ele,1);
        }
        for(int key : map.keySet()){
            int freq=map.get(key);
            if(freq==1) return key;
        }
        return 8665;
    }
}*/
// METHOD-4 USING XOR OPERATOR
/*class Solution {
    public int singleNumber(int[] nums) {
        int n=0;
        for(int ele:nums){
            n = n^ele;
        }
        return n;
    }
}*/
}
// Ques-5-) GFG   Turn On / Set the kth bit    
/*class Solution {
    static int setKthBit(int n, int k) {
        return n|(1<<k);
    }
}*/
// Ques-6-) Turn off/Clear the kth bit  
// Mask with 1111011111
/*class Solution {
    static int offKthBit(int n, int k) {
        return n|(~(1<<k));
    }
}*/
// Ques-7-) Toggle kth bit.
/*class Solution {
    static int offKthBit(int n, int k) {
        return n^(1<<k);
    }
}*/
// Ques-8-) GFG Toggle bits in the given range
// (1 << (R - L + 1)) - 1 creates a sequence of 1s for the required bit range.
// << (L - 1) shifts the 1s to the correct position.
/*class Solution {
    static int toggleBits(int N, int L , int R) {
        int mask = ((1 << (R - L + 1)) - 1) << (L - 1);
        return N ^ mask;
    }
};*/
public class L6_RightmostSetBit {
    public static void main(String[] args) {
// Ques-9-) Turn off the Rightmost set bit.
        int a = 36;
    // METHOD-1  T.C. = O(logn)
        /*int b=a,k=0;
        while(b%2==0){
            b = b>>1;
            k++;
        }
        System.out.println(a&(~(1<<k)));  // 32
        */
    // METHOD-2 T.C. = O(1)
    //    36 = 100100
    //    35 = 100011
    // 36&35 = 100000 = 32
        System.out.println(a&(a-1));   
    }
}
// Ques-10-) Leetcode 231(Easy) Power of Two   
// METHOD-1  BRUTE FORCE (RECURSION)
/*class Solution {
    public boolean isPowerOfTwo(int n) {
        if(n==1) return true;
        if(n<=0 || n%2!=0) return false;
        return isPowerOfTwo(n/2);
    }
}*/
// METHOD-2    & OPERATOR
/*class Solution {
    public boolean isPowerOfTwo(int n) {
        return (n<=0) ? false : (n&(n-1))==0;
    }
}*/
// Ques-11-) Leetcode 191(Easy) Number of 1 bits
// METHOD-1  CHECK EACH POSITION
/*class Solution {
    public int hammingWeight(int n) {
        int count=0;
        for(int i=0;i<32;i++){
            int mask = (1<<i);
            if((n&mask)!=0) count++;
        }
        return count;
    }
}*/
// METHOD-2 TURNING OFF THE RIGHTMOST SET BIT AGAIN AND AGAIN 
/*class Solution {
    public int hammingWeight(int n) {
        int count=0;
        while(n!=0){
            n = n & (n-1);
            count++;
        }
        return count;
    }
}*/
// Ques-12-) Leetcode 2220(Easy) Minimum bit flips to convert number.
/*class Solution {
    public int hammingWeight(int n) {
        int count=0;
        while(n!=0){
            n = n & (n-1);
            count++;
        }
        return count;
    }
    public int minBitFlips(int start, int goal) {
        int n = start^goal;
        return hammingWeight(n);
    }
}*/
// Ques-13-) Leetcode 342(Easy) Power of four
// METHOD-1
/*class Solution {
    public boolean isPowerOfFour(int n) {
        if(n==1) return true;
        if(n<=0 || n%4!=0) return false;
        return isPowerOfFour(n/4);
    }
}*/
// METHOD-2
/*class Solution {
    public boolean isPerfectSquare(int n){
        int root = (int)Math.sqrt(n);
        return (root*root)==n;
    }
    public boolean isPowerOfFour(int n) {
        if(n<=0) return false;
        return ((n&(n-1))==0) && isPerfectSquare(n);
    }
}*/
// METHOD-3
/*class Solution {
    public boolean isPowerOfFour(int n) {
        if(n<=0) return false;
        return ((n&(n-1))==0) && (n%3==1);
    }
}*/
// Ques-14-) Leetcode (Medium) Single Number III
// METHOD-1 USING HASHMAP
/*class Solution {
    public int[] singleNumber(int[] nums) {
        int[] ans = new int[2];
        List<Integer> list = new ArrayList<>();
        Map<Integer,Integer> map = new HashMap<>();
        for(int ele:nums){
            if(map.containsKey(ele)) map.put(ele,2);
            else map.put(ele,1);
        }
        for(int key : map.keySet()){
            int freq=map.get(key);
            if(freq==1) list.add(key);
        }
        ans[0] = list.get(0);
        ans[1] = list.get(1);
        return ans;
    }
}*/
// METHOD-2
/*class Solution {
    public int[] singleNumber(int[] nums) {
        int[] ans = new int[2];
        int xor = 0;
        for(int ele:nums){
            xor ^= ele;
        }
        int rightOffBit = xor & (xor-1);
        int mask = xor ^ rightOffBit;
        for(int ele:nums){
            if((mask&ele)==0) ans[0] ^= ele;
            else ans[1] ^= ele;
        }
        return ans;
    }
}*/   
// Ques-15-) Leetcode 78(Medium) Subsets
/*class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        int n = nums.length;
        int total = (1<<n);
        for(int num=0;num<total;num++){
            List<Integer> list = new ArrayList<>();
            for(int bitIdx=0;bitIdx<n;bitIdx++){
                int mask = (1<<bitIdx);
                if((mask&num) != 0) list.add(nums[bitIdx]);
            }
            ans.add(list);
        }
        return ans;
    }
}*/  
// Ques-16-) Leetcode 190(Easy) Reverse Bits
/*public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int i=0, j=31;
        while(i<j){
            int imask = (1<<i) , jmask = (1<<j);
            boolean iOn = ((n&imask)!=0), jOn = ((n&jmask)!=0);
            if(iOn!=jOn){
                n ^= imask;
                n ^= jmask;
            }
            i++;
            j--;
        }
        return n;
    }
}*/
// Ques-17-) XOR of number in a given range.
// METHOD -1-) QUES OF GFG
/*class Solution{
    public int getXor(int[] nums, int a, int b){
        // Code here
        int XOR = 0;
        for(int i=a;i<=b;i++){
            XOR ^= nums[i];
        }
        return XOR;
    }
}*/
// METHOD -2-) RANGE IS COUNTINOUS RANGE OF INTEGERs from L to R
    public static int XOR(int n){
        if(n%4==1) return 1;
        if(n%4==2) return n+1;
        if(n%4==3) return 0;
        if(n%4==0) return n;
        return -1;
    }
    public static void main(String[] args) {
        int L = 45, R = 56;
        int ans = XOR(L-1)^XOR(R);
        System.out.println(ans);
    }
// Ques-18-) Leetcode 1310(Medium) XOR Queries of a Subarray
/*class Solution {
    public int[] xorQueries(int[] arr, int[][] queries) {
        int n = arr.length, m = queries.length;
        for(int i=1;i<n;i++){
            arr[i] ^= arr[i-1];
        }
        int[] ans = new int[m];
        for(int i=0; i<m; i++){
            int left = queries[i][0], right = queries[i][1];
            if(left==0) ans[i] = arr[right];
            else ans[i] = arr[left-1] ^ arr[right];
        }
        return ans;
    }
}*/
// Ques-1-) Leetcode 547(Medium) Number of Provinces
/*class Solution {
    public void bfs(int i, boolean[] vis, int[][] adj){
        int n = adj.length;
        vis[i] = true;
        Queue<Integer> q = new LinkedList<>(); 
        q.add(i);
        while(q.size()>0){
            int front = q.remove();
            for(int j=0;j<n;j++){
                if(adj[front][j]==1 && vis[j]==false){
                    q.add(j);
                    vis[j] = true;
                }
            }
        }
    }
    public int findCircleNum(int[][] adj) {
        int n = adj.length;
        int count =0;
        boolean[] vis = new boolean[n];
        for(int i=0;i<n;i++){
            if(!vis[i]){
                bfs(i,vis,adj);
                count++;
            }
        }
        return count;
    }
}*/
// Ques-2-) Leetcode 841(Medium) Keys and Rooms
/*class Solution {
    public void bfs(int start, List<List<Integer>> adj, boolean[] visited){
        Queue<Integer> q = new LinkedList<>();
        q.add(start);
        while(q.size()>0){
            int front = q.remove();
            for(int ele: adj.get(front)){
                if(!visited[ele]){
                    visited[ele] = true;
                    q.add(ele);
                }
            }
        }
    }
    public boolean canVisitAllRooms(List<List<Integer>> adj) {
        int n = adj.size();
        boolean[] visited = new boolean[n];
        visited[0] = true;
        bfs(0,adj,visited);
        for(boolean ele:visited){
            if(ele==false) return false;
        }
        return true;
    }
}*/
// Ques-3-) 1971Leetcode (Medium) Find if path exist in graph 
/*class Solution {
    public void bfs(int start, List<List<Integer>> adj, boolean[] visited,int end){
      Queue<Integer> q = new LinkedList<>();
      q.add(start);
      while(q.size()>0){
        int front = q.remove();
        for(int ele: adj.get(front)){
          if(!visited[ele]){
            visited[ele] = true;
            q.add(ele);
            if(ele==end) return;
          }
        }
      }
    }
    public boolean validPath(int n, int[][] edges, int start, int end) {
      if(start==end) return true; 
      List<List<Integer>> adj = new ArrayList<>();
      for(int i=0;i<n;i++){
        adj.add(new ArrayList<>());
      }
      for(int i=0;i<edges.length;i++){
        int a = edges[i][0] , b = edges[i][1];
        adj.get(a).add(b);
        adj.get(b).add(a);
      }
      boolean[] vis = new boolean[n];
      vis[start] =true;
      bfs(start,adj,vis,end);
      return vis[end];
    }
}*/
// Ques-4-) Leetcode 200(Medium) Number of Islands(BFS)
/*class Solution {
  class Pair {
    int row, col;
    Pair(int row, int col) {
      this.row = row;
      this.col = col;
    }
  }
  public void bfs(int i, int j, char[][] grid, boolean[][] vis) {
    int m = grid.length, n = grid[0].length;
    Queue<Pair> q = new LinkedList<>();
    q.add(new Pair(i, j));
    while (q.size() > 0) {
      Pair front = q.remove();
      int row = front.row, col = front.col;
      // top 
      if(row>0){
        if(vis[row-1][col]==false && grid[row-1][col]=='1'){
          q.add(new Pair(row-1,col));
          vis[row-1][col] = true;
        }
      }
      // bottom
      if(row+1<m){
        if(vis[row+1][col]==false && grid[row+1][col]=='1'){
          q.add(new Pair(row+1,col));
          vis[row+1][col] = true;
        }
      }
      // left
      if (col > 0) {
        if (vis[row][col-1] == false && grid[row][col-1] == '1') {
          q.add(new Pair(row, col-1));
          vis[row][col-1] = true;
        }
      }
      // right
      if (col+1 < n) {
        if (vis[row][col+1] == false && grid[row][col+1] == '1') {
          q.add(new Pair(row, col+1));
          vis[row][col+1] = true;
        }
      }
    }
  }
  public int numIslands(char[][] grid) {
    int m = grid.length, n = grid[0].length;
    boolean[][] vis = new boolean[m][n];
    int count = 0;
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        if (grid[i][j] == '1' && !vis[i][j]) {
          bfs(i, j, grid, vis);
          count++;
        }
      }
    }
    return count;
  }
}*/
// Ques-5-) Leetcode 547(Medium) Number of Provinces (DFS)
/*class Solution {
    public void dfs(int i, boolean[] vis, int[][] adj){
        int n = adj.length;
        vis[i] = true;
        for(int j=0;j<n;j++){
          if(adj[i][j]==1 && vis[j]==false){
            dfs(j,vis,adj);
          }
        }
    }
    public int findCircleNum(int[][] adj) {
        int n = adj.length;
        int count =0;
        boolean[] vis = new boolean[n];
        for(int i=0;i<n;i++){
            if(!vis[i]){
                dfs(i,vis,adj);
                count++;
            }
        }
        return count;
    }
}*/
// Ques-6-) Leetcode 200(Medium) Number of Islands (DFS)
/*class Solution {
  public void dfs(int i, int j, char[][] grid, boolean[][] vis) {
    int m = grid.length, n = grid[0].length;
    vis[i][j] = true;
    if((i-1)>=0 && grid[i-1][j] == '1' && vis[i-1][j]==false) 
      dfs(i-1,j,grid,vis);
    if((i+1)<m && grid[i+1][j] == '1' && vis[i+1][j]==false)
      dfs(i+1,j,grid,vis);
    if((j-1)>=0 && grid[i][j-1] == '1' && vis[i][j-1]==false) 
      dfs(i,j-1,grid,vis);
    if((j+1)<n && grid[i][j+1] == '1' && vis[i][j+1]==false)
      dfs(i,j+1,grid,vis); 
  }
  public int numIslands(char[][] grid) {
    int m = grid.length, n = grid[0].length;
    boolean[][] vis = new boolean[m][n];
    int count = 0;
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        if (grid[i][j] == '1' && !vis[i][j]) {
          dfs(i, j, grid, vis);
          count++;
        }
      }
    }
    return count;
  }
}*/
// Ques-7-) Leetcode 841(Medium) Keys and Rooms  (DFS)
/*class Solution {
    public void dfs(int start, List<List<Integer>> adj, boolean[] visited){
      visited[start] = true;
      for(int ele:adj.get(start)){
        if(!visited[ele]) dfs(ele,adj,visited);
      }
    }
    public boolean canVisitAllRooms(List<List<Integer>> adj) {
        int n = adj.size();
        boolean[] visited = new boolean[n];
        visited[0] = true;
        dfs(0,adj,visited);
        for(boolean ele:visited){
            if(ele==false) return false;
        }
        return true;
    }
}*/
// Ques-8-) Leetcode 785(Medium) Is Graph Bipartite?
/*class Solution {
  static boolean ans;
  public void bfs(int i, int[][] adj, int[] visited){
    Queue<Integer> q = new LinkedList<>();
    visited[i] = 0;
    q.add(i);
    while(q.size()>0){
      int front = q.remove();
      int color = visited[front];
      for(int ele:adj[front]){
        if(visited[ele]==visited[front]){
          ans=false;
          return;
        }
        if(visited[ele]==-1){
          visited[ele] = 1-color;
          q.add(ele);
        }
      }
    }
  }
  public boolean isBipartite(int[][] adj) {
    ans= true;
    int n = adj.length;
    int[] visited = new int[n];
    Arrays.fill(visited,-1);
    // 1-> red, 0->blue
    for(int i=0;i<n;i++){
      if(ans==false) return ans;
      if(visited[i]==-1) bfs(i,adj,visited);
    }
    return ans;
  }
}*/
// Ques-9-) Leetcode 207(Medium) Course schedule
/*class Solution {
  public boolean canFinish(int n, int[][] pre) {
    List<List<Integer>> adj = new ArrayList<>();
    for(int i=1;i<=n;i++) adj.add(new ArrayList<>());
    int[] indegree = new int[n];
    for(int i=0;i<pre.length;i++){
      int a=pre[i][0],  b=pre[i][1];  // b->a
      adj.get(b).add(a);
      indegree[a]++;
    }
    // kahn's algorithm
    Queue<Integer> q = new LinkedList<>();
    List<Integer> ans = new ArrayList<>();
    for(int i=0;i<n;i++){
      if(indegree[i]==0)
        q.add(i);
    }
    while(q.size()>0){
      int front = q.remove();
      ans.add(front);
      for(int ele : adj.get(front)){
        indegree[ele]--;
        if(indegree[ele]==0)
          q.add(ele);
      }
    }
    return ans.size() == n;
  }
}*/
// Ques-10-) Leetcode 210(Medium) Course schedule II
/*class Solution {
  public int[] findOrder(int n, int[][] pre) {
    List<List<Integer>> adj = new ArrayList<>();
    for(int i=1;i<=n;i++) adj.add(new ArrayList<>());
    int[] indegree = new int[n];
    for(int i=0;i<pre.length;i++){
      int a=pre[i][0],  b=pre[i][1];  // b->a
      adj.get(b).add(a);
      indegree[a]++;
    }
    // kahn's algorithm
    Queue<Integer> q = new LinkedList<>();
    List<Integer> ans = new ArrayList<>();
    for(int i=0;i<n;i++){
      if(indegree[i]==0)
        q.add(i);
    }
    while(q.size()>0){
      int front = q.remove();
      ans.add(front);
      for(int ele : adj.get(front)){
        indegree[ele]--;
        if(indegree[ele]==0)
          q.add(ele);
      }
    }
    int[] ans2 = new int[ans.size()];
    for(int i=0;i<ans.size();i++){
      ans2[i] = ans.get(i);
    } 
    if(ans.size() != n) return new int[0];
    else return ans2;        
  }
}*/
// Ques-11-) Leetcode 802(Medium) Find eventual safe states
/*class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
      // reverse the graph 
      int n = graph.length;
      List<List<Integer>> adj = new ArrayList<>();
      for(int i=0;i<n;i++) adj.add(new ArrayList<>());
      int[] indegree = new int[n];
      for(int i=0;i<n;i++){
        for(int ele:graph[i]){
          // in original graph, edge is from i to ele
          // in reverse graph, it will be from ele to i
          adj.get(ele).add(i);
          indegree[i]++;
        }
      }
      // Apply Kahn's algorithm
      Queue<Integer> q = new LinkedList<>();
      for(int i=0;i<n;i++){
        if(indegree[i] == 0) q.add(i);
      }
      List<Integer> ans = new ArrayList<>();
      while(q.size()>0){
        int front = q.remove();
        ans.add(front);
        for(int ele : adj.get(front)){
          indegree[ele]--;
          if(indegree[ele]==0) q.add(ele);
        }
      }
      Collections.sort(ans);
      return ans;
    }
}*/
// Ques-13-) Leetcode 207(Medium) Course schedule
/*class Solution {
  static boolean ans;
  public void dfs(int i,List<List<Integer>> adj, boolean[] vis, boolean[] path){
    vis[i] = true;
    path[i] = true;
    for(int ele:adj.get(i)){
      if(path[ele]==true){
        ans = false;
        return;
      }
      if(vis[ele]==false) dfs(ele,adj,vis,path);
    }
    path[i] = false;
  }
  public boolean canFinish(int n, int[][] pre) {
    ans = true;  // no cycle
    List<List<Integer>> adj = new ArrayList<>();
    for(int i=1;i<=n;i++) adj.add(new ArrayList<>());
    for(int i=0;i<pre.length;i++){
      int a=pre[i][0],  b=pre[i][1];  // b->a
      adj.get(b).add(a);
    }
    // DFS
    boolean[] vis = new boolean[n];
    boolean[] path = new boolean[n];
    for(int i=0;i<n;i++){
      if(vis[i]==false) dfs(i,adj,vis,path);
    }
    return ans;
  }
}*/
// Ques-14-) Leetcode 743(Medium) Network Delay Time
/*class Solution {
  public class Pair implements Comparable<Pair>{
    int node,time;
    Pair(int node, int time){
      this.node = node;
      this.time = time;
    }
    public int compareTo(Pair p){
      if(this.time == p.time) return this.node-p.node;
      return this.time - p.time;
    }
  }
  public int networkDelayTime(int[][] times, int n, int src) {
    List<List<Pair>> adj = new ArrayList<>();
    for(int i=0;i<=n;i++){
      adj.add(new ArrayList<Pair>());
    }
    for(int i=0;i<times.length;i++){
      int u = times[i][0], v = times[i][1], t = times[i][2];
      adj.get(u).add(new Pair(v,t));
    }
    int[] ans = new int[n+1];
    Arrays.fill(ans,Integer.MAX_VALUE);
    ans[src] = 0;
    PriorityQueue<Pair> pq = new PriorityQueue<>();
    pq.add(new Pair(src,0));
    while(pq.size()>0){
      Pair top = pq.remove();
      if(top.time > ans[top.node]) continue;
      for(Pair p : adj.get(top.node)){
        int totalTime = top.time + p.time;
        if(totalTime<ans[p.node]){
          ans[p.node] = totalTime;
          pq.add(new Pair(p.node,totalTime));  
        } 
      }
    }
    int max = -1;
    for(int i=1;i<ans.length;i++){
      max = Math.max(ans[i],max);
    }
    if(max == Integer.MAX_VALUE) return -1;
    else return max;
  }
}*/
// Ques-15-) Leetcode 1514(Medium) Path with Maximum Probability
/*class Solution {
  public class Pair implements Comparable<Pair>{
    int node;
    double prob;
    Pair(int node, double prob){
      this.node = node;
      this.prob = prob;
    }
    public int compareTo(Pair p){
      if(this.prob == p.prob) return this.node-p.node;
      return Double.compare(this.prob,p.prob);
    }
  }
  public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
    List<List<Pair>> adj = new ArrayList<>();
    for(int i=0;i<n;i++) adj.add(new ArrayList<>());
    for(int i=0;i<edges.length;i++){
      int u = edges[i][0], v = edges[i][1];
      double prob = succProb[i];
      adj.get(u).add(new Pair(v,prob));
      adj.get(v).add(new Pair(u,prob));
    }
    double[] ans = new double[n];
    ans[start] = 1;
    PriorityQueue<Pair> pq = new PriorityQueue<>(Collections.reverseOrder());
    pq.add(new Pair(start,1));
    while(pq.size()>0){
      Pair top = pq.remove();
      int tnode = top.node;
      double tprob = top.prob;
      if(top.prob < ans[tnode]) continue;
      for(Pair p : adj.get(tnode)){
        double totalProb = tprob * p.prob;
        if(totalProb > ans[p.node]){
          ans[p.node] = totalProb;
          pq.add(new Pair(p.node,totalProb)); 
        }
      }
    }
    return ans[end];
  }
}*/
// Ques-16-) Leetcode 1631(Medium) Path with Minimum Effort
/*class Solution {
  public class Triplet implements Comparable<Triplet>{
    int row,col,effort;
    Triplet(int row,int col,int effort){
      this.row = row;
      this.col = col;
      this.effort = effort;
    }
    public int compareTo(Triplet t){
      if(this.effort == t.effort) return this.row - t.row;
      return this.effort - t.effort;
    }
  }
  public int minimumEffortPath(int[][] arr) {
    int m = arr.length, n = arr[0].length;
    int[][] ans = new int[m][n];
    for(int i=0;i<m;i++) Arrays.fill(ans[i],Integer.MAX_VALUE);
    ans[0][0] = 0;
    PriorityQueue<Triplet> pq = new PriorityQueue<>();
    pq.add(new Triplet(0,0,0));
    while(pq.size()>0){
      Triplet top = pq.remove();
      int row=top.row, col=top.col, effort=top.effort;
      if(row==m-1 && col==n-1) return effort;
      if(row>0){ // going up
        int e = Math.abs(arr[row][col]-arr[row-1][col]);
        e = Math.max(e,effort);
        if(e < ans[row-1][col]){
          ans[row-1][col]=e;
          pq.add(new Triplet(row-1,col,e));
        }
      }
      if(col>0){ // going left
        int e = Math.abs(arr[row][col]-arr[row][col-1]);
        e = Math.max(e,effort);
        if(e<ans[row][col-1]){
          ans[row][col-1]=e;
          pq.add(new Triplet(row,col-1,e));
        }
      }
      if(row<m-1){ // going down
        int e = Math.abs(arr[row][col]-arr[row+1][col]);
        e = Math.max(e,effort);
        if(e<ans[row+1][col]){
          ans[row+1][col]=e;
          pq.add(new Triplet(row+1,col,e));
        }
      }
      if(col<n-1){ // going right
        int e = Math.abs(arr[row][col]-arr[row][col+1]);
        e = Math.max(e,effort);
        if(e<ans[row][col+1]){
          ans[row][col+1]=e;
          pq.add(new Triplet(row,col+1,e));
        }
      }
    }
    return -1;
  }
}*/
// MORE COMPILED
/*class Solution {
  public class Triplet implements Comparable<Triplet>{
    int row,col,effort;
    Triplet(int row,int col,int effort){
      this.row = row;
      this.col = col;
      this.effort = effort;
    }
    public int compareTo(Triplet t){
      if(this.effort == t.effort) return this.row - t.row;
      return this.effort - t.effort;
    }
  }
  public int minimumEffortPath(int[][] arr) {
    int m = arr.length, n = arr[0].length;
    int[][] ans = new int[m][n];
    for(int i=0;i<m;i++) Arrays.fill(ans[i],Integer.MAX_VALUE);
    ans[0][0] = 0;
    PriorityQueue<Triplet> pq = new PriorityQueue<>();
    pq.add(new Triplet(0,0,0));
    int[] r = {-1,0,1,0};
    int[] c = {0,-1,0,1};
    while(pq.size()>0){
      Triplet top = pq.remove();
      int row=top.row, col=top.col, effort=top.effort;
      if(row==m-1 && col==n-1) return effort;
      for(int i=0;i<=3;i++){
        int newRow= row + r[i];
        int newCol= col + c[i];
        if(newRow<0 || newCol<0 || newRow>m-1 || newCol>n-1) continue;
        int e = Math.abs(arr[row][col]-arr[newRow][newCol]);
        e = Math.max(e,effort);
        if(e < ans[newRow][newCol]){
          ans[newRow][newCol]=e;
          pq.add(new Triplet(newRow,newCol,e));
        }
      }
    }
    return -1;
  }
}*/
// Ques-17-) Leetcode 787 Cheapest Flights within K stops
/*class Solution {
  public class Pair {
    int node, cost;
    Pair(int node,int cost) {
      this.node = node;
      this.cost = cost;
    }
  }
  public class Triplet implements Comparable<Triplet>{
    int node,cost,stops;
    Triplet(int node,int cost,int stops){
      this.node = node;
      this.cost = cost;
      this.stops = stops;
    }
    public int compareTo(Triplet t){
      if(this.stops == t.stops) return this.cost - t.cost;
      return this.stops - t.stops;
    }
  }
  public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
    List<List<Pair>> adj = new ArrayList<>();
    for (int i = 0; i < n; i++)
      adj.add(new ArrayList<>());
    for (int i = 0; i < flights.length; i++) {
      int u = flights[i][0], v = flights[i][1], price = flights[i][2];
      adj.get(u).add(new Pair(v, price));
    }
    int[] ans = new int[n];
    Arrays.fill(ans,Integer.MAX_VALUE);
    ans[src] = 0;
    PriorityQueue<Triplet> pq = new PriorityQueue<>();
    pq.add(new Triplet(src,0,0));
    while(pq.size()>0){
      Triplet top = pq.remove();
      int node=top.node, cost=top.cost, stops=top.stops;
      // if(node==dst) return ans[node];
      if(stops==k+1) continue;
      for(Pair p:adj.get(node)){
        int totalCost = cost+p.cost;
        if(totalCost<ans[p.node]){
          ans[p.node] = totalCost;
          pq.add(new Triplet(p.node, totalCost,stops+1));
        }
      }
    }
    if(ans[dst]==Integer.MAX_VALUE) return -1; // if ans is max value then it return -1
    else return ans[dst];
  }
}*/
// USING QUEUE
/*class Solution {
  public class Pair {
    int node, cost;
    Pair(int node,int cost) {
      this.node = node;
      this.cost = cost;
    }
  }
  public class Triplet {
    int node,cost,stops;
    Triplet(int node,int cost,int stops){
      this.node = node;
      this.cost = cost;
      this.stops = stops;
    }
  }
  public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
    List<List<Pair>> adj = new ArrayList<>();
    for (int i = 0; i < n; i++)
      adj.add(new ArrayList<>());
    for (int i = 0; i < flights.length; i++) {
      int u = flights[i][0], v = flights[i][1], price = flights[i][2];
      adj.get(u).add(new Pair(v, price));
    }
    int[] ans = new int[n];
    Arrays.fill(ans,Integer.MAX_VALUE);
    ans[src] = 0;
    Queue<Triplet> pq = new LinkedList<>();
    pq.add(new Triplet(src,0,0));
    while(pq.size()>0){
      Triplet top = pq.remove();
      int node=top.node, cost=top.cost, stops=top.stops;
      // if(node==dst) return ans[node];
      if(stops==k+1) continue;
      for(Pair p:adj.get(node)){
        int totalCost = cost+p.cost;
        if(totalCost<ans[p.node]){
          ans[p.node] = totalCost;
          pq.add(new Triplet(p.node, totalCost,stops+1));
        }
      }
    }
    if(ans[dst]==Integer.MAX_VALUE) return -1; // if ans is max value then it return -1
    else return ans[dst];
  }
}*/
// Ques-18-) Leetcode 1584(Medium) Minimum cost to connect all points
/*class Solution {
  public class Triplet implements Comparable<Triplet>{
    int node, parent,dist;
    Triplet(int node, int parent, int dist){
      this.node=node;
      this.parent=parent;
      this.dist=dist;
    }
    public int compareTo(Triplet t){
      if(this.dist==t.dist) return Integer.compare(this.node,t.node);
      return Integer.compare(this.dist, t.dist);
    }
  }
  public int minCostConnectPoints(int[][] points) {
    int n = points.length;
    PriorityQueue<Triplet> pq = new PriorityQueue<>();
    pq.add(new Triplet(0,-1,0));
    int sum=0;
    boolean[] vis = new boolean[n];
    while(pq.size()>0){
      Triplet top = pq.remove();
      int node=top.node, parent=top.parent, dist=top.dist;
      if(vis[node]) continue;
      sum += dist;
      vis[node] = true;
      for(int i=0;i<n;i++){
        if(i==node || i==parent) continue;
        if(vis[i]) continue;
        int x1 = points[node][0], y1 = points[node][1];
        int x2 = points[i][0], y2 = points[i][1];
        int mDis = Math.abs(x1-x2) + Math.abs(y1-y2);
        pq.add(new Triplet(i,node,mDis));
      }
    }
    return sum;
  }
}*/
// Ques-19-) Leetcode 743(Medium) Network Delay Time
/*class Solution {
  public int networkDelayTime(int[][] times, int n, int src) {
    int[] dist = new int[n + 1];
    Arrays.fill(dist, Integer.MAX_VALUE);
    dist[src] = 0;
    for (int x = 1; x < n; x++) { // n-1 times edges travel
      for (int i = 0; i < times.length; i++) {
        int u = times[i][0], v = times[i][1], wt = times[i][2];
        if (dist[u] != Integer.MAX_VALUE && dist[u] + wt < dist[v]) {
          dist[v] = dist[u] + wt;
        }
      }
    }
    // nth time relaxation for -ve detection
    for (int i = 0; i < times.length; i++) {
      int u = times[i][0], v = times[i][1], wt = times[i][2];
      if (dist[u] != Integer.MAX_VALUE && dist[u] + wt < dist[v]) {
        return  -1;
      }
    }
    int max = 0;
    for (int i = 1; i <= n; i++) {
      if (dist[i] == Integer.MAX_VALUE)
        return -1;
      max = Math.max(max, dist[i]);
    }
    return max;
  }
}*/
// Ques-20-) Leetcode 1334(Medium) Find the City With the Smallest Number of Neighbors at a Threshold Distance.
/*class Solution {
  public int findTheCity(int n, int[][] edges, int threshold) {
    int[][] dist = new int[n][n];
    for (int i = 0; i < n; i++)
      Arrays.fill(dist[i], Integer.MAX_VALUE);
    for (int i = 0; i < edges.length; i++) {
      int u = edges[i][0], v = edges[i][1], wt = edges[i][2];
      dist[u][v] = wt;
      dist[v][u] = wt;
    }
    // Floyd Warshall
    for (int k = 0; k < n; k++) {
      for (int i = 0; i < n; i++) {
        if (i == k)
          continue;
        for (int j = 0; j < n; j++) {
          if (j == k)
            continue;
          if (dist[i][k] != Integer.MAX_VALUE && dist[k][j] != Integer.MAX_VALUE) {
            dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
          }
        }
      }
    }
    int minCity = -1;
    int minCount = Integer.MAX_VALUE;
    for (int i = 0; i < n; i++) {
      int count = 0; // from i->j where dist[i][j] <= threshold
      for (int j = 0; j < n; j++) {
        if(i==j) continue;
        if (dist[i][j] <= threshold)
          count++;
      }
      if (count <= minCount) {
        minCount = count;
        minCity = i;
      }
    }
    return minCity;
  }
}*/





/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
 
// Ques-21-) Leetcode 547(Medium) Number of Provinces by DSU
/*class Solution {
  static int[] parent;
  public int find(int a){
    if(parent[a]==a) return a;
    return find(parent[a]);
  }
  public void union(int a, int b){
    int leaderA = find(a);
    int leaderB = find(b);
    if(leaderA!=leaderB){
      parent[leaderB] = leaderA;
    }
  }
  public int findCircleNum(int[][] isConnected) {
    int n = isConnected.length;
    parent = new int[n+1];
    for(int i=1;i<=n;i++) parent[i] = i;
    for(int i=0;i<n;i++){
      for(int j=0;j<n;j++){
        //edge is from i+1 to j+1
        if(i!=j && isConnected[i][j]==1) union(i+1,j+1);  // connecting group leaders of both
      }
    }
    int count=0;
    for(int i=1;i<=n;i++){
      if(parent[i]==i) count++;
    }
    return count;
  }
}*/
// OPTIMISATION 1
/*class Solution {
  static int[] parent;
  static int[] size;
  public int find(int a) {
    if (parent[a] == a)
      return a;
    return find(parent[a]);
  }
  public void union(int a, int b) {
    a = find(a);
    b = find(b);
    if (a != b) {
      if (size[a] > size[b]) { // a sholud be parent of b
        parent[b] = a;
        size[a] += size[b];
      } else {
        parent[a] = b;
        size[b] += size[a];
      }
    }
  }
  public int findCircleNum(int[][] isConnected) {
    int n = isConnected.length;
    parent = new int[n + 1];
    size = new int[n + 1];
    for (int i = 1; i <= n; i++) {
      parent[i] = i;
      size[i] = 1;
    }
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        // edge is from i+1 to j+1
        if (i != j && isConnected[i][j] == 1)
          union(i + 1, j + 1); // connecting group leaders of both
      }
    }
    int count = 0;
    for (int i = 1; i <= n; i++) {
      if (parent[i] == i)
        count++;
    }
    return count;
  }
}*/
// OPTIMISATION 2 (BEST)
/*class Solution {
  static int[] parent;
  static int[] size;
  public int find(int a) {
    if (parent[a] == a) return a;
    return parent[a] = find(parent[a]);
  }
  public void union(int a, int b) {
    a = find(a);
    b = find(b);
    if (a != b) {
      if (size[a] > size[b]) { // a sholud be parent of b
        parent[b] = a;
        size[a] += size[b];
      } else {
        parent[a] = b;
        size[b] += size[a];
      }
    }
  }
  public int findCircleNum(int[][] isConnected) {
    int n = isConnected.length;
    parent = new int[n + 1];
    size = new int[n + 1];
    for (int i = 1; i <= n; i++) {
      parent[i] = i;
      size[i] = 1;
    }
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        // edge is from i+1 to j+1
        if (i != j && isConnected[i][j] == 1)
          union(i + 1, j + 1); // connecting group leaders of both
      }
    }
    int count = 0;
    for (int i = 1; i <= n; i++) {
      if (parent[i] == i)
        count++;
    }
    return count;
  }
}*/
// CYCLE DETECTION IN UNDIRECTED GRAPH 
// Ques-22-) Leetcode 684(Medium) Redundant Connection
/*class Solution {
  static int[] parent;
  static int[] size;
  public int leader(int u){
    if(parent[u]==u) return u;
    return parent[u] = leader(parent[u]);
  }
  public void union(int u, int v){
    int a = leader(u);
    int b = leader(v);
    if(a!=b){
      if(size[a]>size[b]){
        parent[b]=a;
        size[a]+=size[b];
      } else{
        parent[a]=b;
        size[b]+=size[a];
      }
    }
  }
  public int[] findRedundantConnection(int[][] edges) {
    int n = edges.length;
    parent = new int[n+1];
    size = new int[n+1];
    for(int i=0;i<=n;i++){
      parent[i]=i;
      size[i]=1;
    }
    int[] ans = new int[2];
    for(int[] arr:edges){
      int u = arr[0], v = arr[1];
      if(leader(u)==leader(v)){
        ans[0]=u; ans[1]=v; break;
      } else{
        union(u, v); // connecting group leaders of both
      }
    }
    return ans;
  }
}*/
// FOR MINIMUM SPANNING TREE

// Ques-23-) Leetcode 1584(Medium) Minimum cost to connect all points

//USING HEAP  T.C. = O(n²logn)

/*class Solution {
  static int[] parent;
  static int[] size;
  public class Triplet implements Comparable<Triplet> {
    int u, v, dist;
    Triplet(int u, int v, int dist) {
      this.u = u;
      this.v = v;
      this.dist = dist;
    }
    public int compareTo(Triplet t) {
      if (this.dist == t.dist)
        return this.u - t.u;
      return this.dist - t.dist;
    }
  }
  public int leader(int u) {
    if (parent[u] == u)
      return u;
    return parent[u] = leader(parent[u]);
  }
  public void union(int u, int v) {
    int a = leader(u);
    int b = leader(v);
    if (a != b) {
      if (size[a] > size[b]) {
        parent[b] = a;
        size[a] += size[b];
      } else {
        parent[a] = b;
        size[b] += size[a];
      }
    }
  }
  public int minCostConnectPoints(int[][] points) {
    int n = points.length;
    parent = new int[n];
    size = new int[n];
    for (int i = 0; i < n; i++) {
      parent[i] = i;
      size[i] = 1;
    }
    PriorityQueue<Triplet> pq = new PriorityQueue<>();
    for (int u = 0; u < n; u++) {
      for (int v = u + 1; v < n; v++) {
        // u to v edge
        int x1 = points[u][0], y1 = points[u][1];
        int x2 = points[v][0], y2 = points[v][1];
        int dist = Math.abs(x1 - x2) + Math.abs(y1 - y2);
        pq.add(new Triplet(u, v, dist));
      }
    }
    int cost = 0;
    while (pq.size() > 0) {
      Triplet top = pq.remove();
      int u = top.u, v = top.v, dist = top.dist;
      if (leader(u) != leader(v)) {
        cost += dist;
        union(u, v);
      }
    }
    return cost;
  }
}*/
// USING ARRAYLIST BETTER T.C. = O(n²)
/*class Solution {
  static int[] parent;
  static int[] size;
  public class Triplet implements Comparable<Triplet> {
    int u, v, dist;
    Triplet(int u, int v, int dist) {
      this.u = u;
      this.v = v;
      this.dist = dist;
    }
    public int compareTo(Triplet t) {
      if (this.dist == t.dist)
        return this.u - t.u;
      return this.dist - t.dist;
    }
  }
  public int leader(int u) {
    if (parent[u] == u)
      return u;
    return parent[u] = leader(parent[u]);
  }
  public void union(int u, int v) {
    int a = leader(u);
    int b = leader(v);
    if (a != b) {
      if (size[a] > size[b]) {
        parent[b] = a;
        size[a] += size[b];
      } else {
        parent[a] = b;
        size[b] += size[a];
      }
    }
  }
  public int minCostConnectPoints(int[][] points) {
    int n = points.length;
    parent = new int[n];
    size = new int[n];
    for (int i = 0; i < n; i++) {
      parent[i] = i;
      size[i] = 1;
    }
    ArrayList<Triplet> list = new ArrayList<>();
    for (int u = 0; u < n; u++) {
      for (int v = u + 1; v < n; v++) {
        // u to v edge
        int x1 = points[u][0], y1 = points[u][1];
        int x2 = points[v][0], y2 = points[v][1];
        int dist = Math.abs(x1 - x2) + Math.abs(y1 - y2);
        list.add(new Triplet(u, v, dist));
      }
    }
    Collections.sort(list);
    int cost = 0;
    for(int i=0;i<list.size();i++) {
      Triplet top = list.get(i);
      int u = top.u, v = top.v, dist = top.dist;
      if (leader(u) != leader(v)) {
        cost += dist;
        union(u, v);
      }
    }
    return cost;
  }
}*/
// Ques-24-) Leetcode 785(Medium) Is Graph Bipartite?
/*class Solution {
  static int[] parent, size;
  static boolean[] parity;
  public int leader(int u) {
    if (parent[u] == u)
      return u;
    return parent[u] = leader(parent[u]);
  }
  public void union(int u, int v) {
    int a = leader(u);
    int b = leader(v);
    if (a != b) {
      if (size[a] > size[b]) {
        parent[b] = a;
        size[a] += size[b];
        parity[v] = !parity[u]; // smaller ki parity big ke reverse kar do
      } else {
        parent[a] = b;
        size[b] += size[a];
        parity[u] = !parity[v];
      }
    }
  }
  public boolean isBipartite(int[][] graph) {
    int n=graph.length;
    parent = new int[n];
    size = new int[n];
    parity = new boolean[n];
    for(int i=0;i<n;i++){
      parent[i]=i;
      size[i]=1;
      parity[i]=false;
    }
    for(int i=0;i<n;i++){
      for(int j=0;j<graph[i].length;j++){
        int u=i, v=graph[i][j];
        if(v>u){
          if(leader(u)==leader(v)){  // cycle detected
            if(parity[u]==parity[v]) return false;
          }
          else union(u,v);
        }
      }
    }
    return true;
  }
}*/













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































